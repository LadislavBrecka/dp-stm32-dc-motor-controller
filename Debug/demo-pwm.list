
demo-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d0  080054d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d8  080054d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000074  08005554  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005554  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd35  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002029  00000000  00000000  0002fdd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00032bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023547  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010821  00000000  00000000  00056e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd91b  00000000  00000000  00067648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00144fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800544c 	.word	0x0800544c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800544c 	.word	0x0800544c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe4c 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f84e 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa7c 	bl	8000abc <MX_GPIO_Init>
  MX_TIM2_Init();
 80005c4:	f000 f8fc 	bl	80007c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005c8:	f000 f8a8 	bl	800071c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005cc:	f000 f96c 	bl	80008a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d0:	f000 f9da 	bl	8000988 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fa48 	bl	8000a68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // timer for generating PWM signal
  HAL_TIM_Base_Start_IT(&htim2);
 80005d8:	4819      	ldr	r0, [pc, #100]	; (8000640 <main+0x8c>)
 80005da:	f002 fbab 	bl	8002d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005de:	2104      	movs	r1, #4
 80005e0:	4817      	ldr	r0, [pc, #92]	; (8000640 <main+0x8c>)
 80005e2:	f002 fc71 	bl	8002ec8 <HAL_TIM_PWM_Start>

  // adc for scanning trimmer set value
  HAL_ADC_Start_IT(&hadc1);
 80005e6:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0x90>)
 80005e8:	f000 feea 	bl	80013c0 <HAL_ADC_Start_IT>

  // timer for measuring HAL 1 frequency
  HAL_TIM_Base_Start_IT(&htim3);
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0x94>)
 80005ee:	f002 fba1 	bl	8002d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f2:	2100      	movs	r1, #0
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <main+0x94>)
 80005f6:	f002 fd89 	bl	800310c <HAL_TIM_IC_Start_IT>

  // timer for measuring HAL 2 frequency
  HAL_TIM_Base_Start_IT(&htim4);
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <main+0x98>)
 80005fc:	f002 fb9a 	bl	8002d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000600:	2100      	movs	r1, #0
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0x98>)
 8000604:	f002 fd82 	bl	800310c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // setting up default pwm stride
  TIM2->CCR2 = (htim2.Init.Period * ui8TimPulse) / 100u;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <main+0x8c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <main+0x9c>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	fb02 f303 	mul.w	r3, r2, r3
 8000614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000618:	490e      	ldr	r1, [pc, #56]	; (8000654 <main+0xa0>)
 800061a:	fba1 1303 	umull	r1, r3, r1, r3
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	6393      	str	r3, [r2, #56]	; 0x38

  // setting up default motor direction
  HAL_GPIO_WritePin(MOTOR_DIRECTION_1_GPIO_Port, MOTOR_DIRECTION_1_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2110      	movs	r1, #16
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0xa4>)
 8000628:	f001 fdb8 	bl	800219c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_DIRECTION_2_GPIO_Port, MOTOR_DIRECTION_2_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2120      	movs	r1, #32
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0xa4>)
 8000632:	f001 fdb3 	bl	800219c <HAL_GPIO_WritePin>

  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_IT(&hadc1);
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <main+0x90>)
 8000638:	f000 fec2 	bl	80013c0 <HAL_ADC_Start_IT>
 800063c:	e7fb      	b.n	8000636 <main+0x82>
 800063e:	bf00      	nop
 8000640:	200000d8 	.word	0x200000d8
 8000644:	20000090 	.word	0x20000090
 8000648:	20000120 	.word	0x20000120
 800064c:	20000168 	.word	0x20000168
 8000650:	20000000 	.word	0x20000000
 8000654:	51eb851f 	.word	0x51eb851f
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fa78 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xb8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xb8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <SystemClock_Config+0xbc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xbc>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xbc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f841 	bl	8002758 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006dc:	f000 fb42 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fd68 	bl	80021d0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000706:	f000 fb2d 	bl	8000d64 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_ADC1_Init+0x9c>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ADC1_Init+0x98>)
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC1_Init+0xa0>)
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_ADC1_Init+0x98>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000778:	2201      	movs	r2, #1
 800077a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_ADC1_Init+0x98>)
 800077e:	f000 fddb 	bl	8001338 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 faec 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800078c:	2307      	movs	r3, #7
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC1_Init+0x98>)
 800079e:	f001 f81f 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a8:	f000 fadc 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000090 	.word	0x20000090
 80007b8:	40012000 	.word	0x40012000
 80007bc:	0f000001 	.word	0x0f000001

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_TIM2_Init+0xe4>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_TIM2_Init+0xe4>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000806:	2264      	movs	r2, #100	; 0x64
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_TIM2_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000818:	f002 fa3c 	bl	8002c94 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000822:	f000 fa9f 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000830:	4619      	mov	r1, r3
 8000832:	481c      	ldr	r0, [pc, #112]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000834:	f002 fff8 	bl	8003828 <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800083e:	f000 fa91 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000844:	f002 fae6 	bl	8002e14 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800084e:	f000 fa89 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000862:	f003 fd01 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800086c:	f000 fa7a 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000874:	2332      	movs	r3, #50	; 0x32
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800087c:	2304      	movs	r3, #4
 800087e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2204      	movs	r2, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000888:	f002 ff0c 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000892:	f000 fa67 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM2_Init+0xe4>)
 8000898:	f000 fb88 	bl	8000fac <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	; 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000d8 	.word	0x200000d8

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008d4:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <MX_TIM3_Init+0xdc>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_TIM3_Init+0xd8>)
 80008fa:	f002 f9cb 	bl	8002c94 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 fa2e 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	4619      	mov	r1, r3
 8000914:	481a      	ldr	r0, [pc, #104]	; (8000980 <MX_TIM3_Init+0xd8>)
 8000916:	f002 ff87 	bl	8003828 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 fa20 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000924:	4816      	ldr	r0, [pc, #88]	; (8000980 <MX_TIM3_Init+0xd8>)
 8000926:	f002 fb97 	bl	8003058 <HAL_TIM_IC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 fa18 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	480f      	ldr	r0, [pc, #60]	; (8000980 <MX_TIM3_Init+0xd8>)
 8000944:	f003 fc90 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800094e:	f000 fa09 	bl	8000d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000956:	2301      	movs	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_TIM3_Init+0xd8>)
 800096a:	f002 fdff 	bl	800356c <HAL_TIM_IC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000974:	f000 f9f6 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000120 	.word	0x20000120
 8000984:	40000400 	.word	0x40000400

08000988 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <MX_TIM4_Init+0xdc>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009d8:	4821      	ldr	r0, [pc, #132]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009da:	f002 f95b 	bl	8002c94 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80009e4:	f000 f9be 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	4619      	mov	r1, r3
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <MX_TIM4_Init+0xd8>)
 80009f6:	f002 ff17 	bl	8003828 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 f9b0 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_TIM4_Init+0xd8>)
 8000a06:	f002 fb27 	bl	8003058 <HAL_TIM_IC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f9a8 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_TIM4_Init+0xd8>)
 8000a24:	f003 fc20 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000a2e:	f000 f999 	bl	8000d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a36:	2301      	movs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_TIM4_Init+0xd8>)
 8000a4a:	f002 fd8f 	bl	800356c <HAL_TIM_IC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000a54:	f000 f986 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000168 	.word	0x20000168
 8000a64:	40000800 	.word	0x40000800

08000a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART2_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f003 fc72 	bl	8004388 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f95b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001b0 	.word	0x200001b0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_GPIO_Init+0x7c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIRECTION_1_Pin|MOTOR_DIRECTION_2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2130      	movs	r1, #48	; 0x30
 8000b0e:	480b      	ldr	r0, [pc, #44]	; (8000b3c <MX_GPIO_Init+0x80>)
 8000b10:	f001 fb44 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_DIRECTION_1_Pin MOTOR_DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIRECTION_1_Pin|MOTOR_DIRECTION_2_Pin;
 8000b14:	2330      	movs	r3, #48	; 0x30
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x80>)
 8000b2c:	f001 f9a2 	bl	8001e74 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400

08000b40 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	POT_VALUE = HAL_ADC_GetValue(&hadc1);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000b4a:	f000 fe27 	bl	800179c <HAL_ADC_GetValue>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_ADC_ConvCpltCallback+0x6c>)
 8000b54:	801a      	strh	r2, [r3, #0]
	PWM_STRIDE = ( ( (PWM_MAX - PWM_MIN) * (POT_VALUE - POT_MIN) ) / (POT_MAX - POT_MIN)) + PWM_MIN;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_ADC_ConvCpltCallback+0x6c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <HAL_ADC_ConvCpltCallback+0x70>)
 8000b66:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6a:	12d2      	asrs	r2, r2, #11
 8000b6c:	17db      	asrs	r3, r3, #31
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3346      	adds	r3, #70	; 0x46
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b78:	801a      	strh	r2, [r3, #0]
	if (PWM_STRIDE > PWM_MAX) PWM_STRIDE = PWM_MAX;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	2b64      	cmp	r3, #100	; 0x64
 8000b80:	d902      	bls.n	8000b88 <HAL_ADC_ConvCpltCallback+0x48>
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b84:	2264      	movs	r2, #100	; 0x64
 8000b86:	801a      	strh	r2, [r3, #0]
	if (PWM_STRIDE < PWM_MIN) PWM_STRIDE = PWM_MIN;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2b45      	cmp	r3, #69	; 0x45
 8000b8e:	d802      	bhi.n	8000b96 <HAL_ADC_ConvCpltCallback+0x56>
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b92:	2246      	movs	r2, #70	; 0x46
 8000b94:	801a      	strh	r2, [r3, #0]
	ui8TimPulse = PWM_STRIDE;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <HAL_ADC_ConvCpltCallback+0x74>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_ADC_ConvCpltCallback+0x78>)
 8000b9e:	701a      	strb	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	200001f4 	.word	0x200001f4
 8000bb0:	7cf310d7 	.word	0x7cf310d7
 8000bb4:	200001f6 	.word	0x200001f6
 8000bb8:	20000000 	.word	0x20000000

08000bbc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	switch((uint32_t)htim->Instance)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_TIM_IC_CaptureCallback+0x1a>
 8000bce:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d044      	beq.n	8000c5e <HAL_TIM_IC_CaptureCallback+0xa2>
				hal2_Freq = (uint32_t)(F_CLK/hal2_Ticks);
				hal2_State = IDLE;
			}
			break;
	}
}
 8000bd4:	e074      	b.n	8000cc0 <HAL_TIM_IC_CaptureCallback+0x104>
			if(hal1_State == IDLE)
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10a      	bne.n	8000bf4 <HAL_TIM_IC_CaptureCallback+0x38>
				hal1_T1 = TIM3->CCR1;
 8000bde:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000be4:	6013      	str	r3, [r2, #0]
				hal1_TIM3_OVC = 0;
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
				hal1_State = DONE;
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_TIM_IC_CaptureCallback+0x74>
			else if(hal1_State == DONE)
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d119      	bne.n	8000c30 <HAL_TIM_IC_CaptureCallback+0x74>
				hal1_T2 = TIM3->CCR1;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c02:	6013      	str	r3, [r2, #0]
				hal1_Ticks = (hal1_T2 + (hal1_TIM3_OVC * 65536)) - hal1_T1;
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	441a      	add	r2, r3
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c1a:	6013      	str	r3, [r2, #0]
				hal1_Freq = (uint32_t)(F_CLK/hal1_Ticks);
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c28:	6013      	str	r3, [r2, #0]
				hal1_State = IDLE;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
			if(hal1_Freq != 0 || hal2_Freq != 0)
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <HAL_TIM_IC_CaptureCallback+0x84>
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d03c      	beq.n	8000cba <HAL_TIM_IC_CaptureCallback+0xfe>
				sprintf(hal_MSG, "Frequency = %lu Hz ; %lu Hz\n\r", hal1_Freq, hal2_Freq);
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4929      	ldr	r1, [pc, #164]	; (8000cf0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000c4a:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000c4c:	f003 ff90 	bl	8004b70 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)hal_MSG, sizeof(hal_MSG), 100);
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2264      	movs	r2, #100	; 0x64
 8000c54:	4927      	ldr	r1, [pc, #156]	; (8000cf4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000c56:	4828      	ldr	r0, [pc, #160]	; (8000cf8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000c58:	f003 fbe3 	bl	8004422 <HAL_UART_Transmit>
			break;
 8000c5c:	e02d      	b.n	8000cba <HAL_TIM_IC_CaptureCallback+0xfe>
			if(hal2_State == IDLE)
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10a      	bne.n	8000c7c <HAL_TIM_IC_CaptureCallback+0xc0>
				hal2_T1 = TIM4->CCR1;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c6c:	6013      	str	r3, [r2, #0]
				hal2_TIM4_OVC = 0;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
				hal2_State = DONE;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e020      	b.n	8000cbe <HAL_TIM_IC_CaptureCallback+0x102>
			else if(hal2_State == DONE)
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d11c      	bne.n	8000cbe <HAL_TIM_IC_CaptureCallback+0x102>
				hal2_T2 = TIM4->CCR1;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000c8a:	6013      	str	r3, [r2, #0]
				hal2_Ticks = (hal2_T2 + (hal2_TIM4_OVC * 65536)) - hal2_T1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	441a      	add	r2, r3
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000ca2:	6013      	str	r3, [r2, #0]
				hal2_Freq = (uint32_t)(F_CLK/hal2_Ticks);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cb0:	6013      	str	r3, [r2, #0]
				hal2_State = IDLE;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			break;
 8000cb8:	e001      	b.n	8000cbe <HAL_TIM_IC_CaptureCallback+0x102>
			break;
 8000cba:	bf00      	nop
 8000cbc:	e000      	b.n	8000cc0 <HAL_TIM_IC_CaptureCallback+0x104>
			break;
 8000cbe:	bf00      	nop
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40000400 	.word	0x40000400
 8000ccc:	40000800 	.word	0x40000800
 8000cd0:	2000025c 	.word	0x2000025c
 8000cd4:	20000260 	.word	0x20000260
 8000cd8:	2000026c 	.word	0x2000026c
 8000cdc:	20000264 	.word	0x20000264
 8000ce0:	20000268 	.word	0x20000268
 8000ce4:	00f42400 	.word	0x00f42400
 8000ce8:	20000270 	.word	0x20000270
 8000cec:	20000288 	.word	0x20000288
 8000cf0:	08005464 	.word	0x08005464
 8000cf4:	200001f8 	.word	0x200001f8
 8000cf8:	200001b0 	.word	0x200001b0
 8000cfc:	20000274 	.word	0x20000274
 8000d00:	20000278 	.word	0x20000278
 8000d04:	20000284 	.word	0x20000284
 8000d08:	2000027c 	.word	0x2000027c
 8000d0c:	20000280 	.word	0x20000280

08000d10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	switch((uint32_t)htim->Instance)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x28>
			break;
		case (uint32_t)TIM4: // TIM4 is measuring HAL 2 frequency
			hal2_TIM4_OVC++;
			break;
	}
}
 8000d28:	e00d      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x36>
			hal1_TIM3_OVC++;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d34:	801a      	strh	r2, [r3, #0]
			break;
 8000d36:	e006      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x36>
			hal2_TIM4_OVC++;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d42:	801a      	strh	r2, [r3, #0]
			break;
 8000d44:	bf00      	nop
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40000400 	.word	0x40000400
 8000d58:	40000800 	.word	0x40000800
 8000d5c:	2000026c 	.word	0x2000026c
 8000d60:	20000284 	.word	0x20000284

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_ADC_MspInit+0x8c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12f      	bne.n	8000e42 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0x90>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_1_PWM_TRIMER_Pin;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_PWM_TRIMER_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_ADC_MspInit+0x94>)
 8000e2e:	f001 f821 	bl	8001e74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2012      	movs	r0, #18
 8000e38:	f000 ffe5 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e3c:	2012      	movs	r0, #18
 8000e3e:	f000 fffe 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d116      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	201c      	movs	r0, #28
 8000e9c:	f000 ffb3 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f000 ffcc 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ea6:	e072      	b.n	8000f8e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a3b      	ldr	r2, [pc, #236]	; (8000f9c <HAL_TIM_Base_MspInit+0x144>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d134      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a37      	ldr	r2, [pc, #220]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <HAL_TIM_Base_MspInit+0x148>)
 8000f06:	f000 ffb5 	bl	8001e74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201d      	movs	r0, #29
 8000f10:	f000 ff79 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f14:	201d      	movs	r0, #29
 8000f16:	f000 ff92 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 8000f1a:	e038      	b.n	8000f8e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <HAL_TIM_Base_MspInit+0x14c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d133      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_Base_MspInit+0x140>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_TIM_Base_MspInit+0x150>)
 8000f7a:	f000 ff7b 	bl	8001e74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201e      	movs	r0, #30
 8000f84:	f000 ff3f 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f88:	201e      	movs	r0, #30
 8000f8a:	f000 ff58 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40000400 	.word	0x40000400
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40000800 	.word	0x40000800
 8000fa8:	40020400 	.word	0x40020400

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fcc:	d11d      	bne.n	800100a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIMER_2_MOTOR_PWM_Pin;
 8000fea:	2308      	movs	r3, #8
 8000fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER_2_MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8001006:	f000 ff35 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12b      	bne.n	8001096 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_UART_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001076:	230c      	movs	r3, #12
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_UART_MspInit+0x8c>)
 8001092:	f000 feef 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8fe 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <ADC_IRQHandler+0x10>)
 8001106:	f000 fa39 	bl	800157c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000090 	.word	0x20000090

08001114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  TIM2->CCR2 = (htim2.Init.Period * ui8TimPulse) / 100u;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <TIM2_IRQHandler+0x28>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <TIM2_IRQHandler+0x2c>)
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <TIM2_IRQHandler+0x30>)
 800112a:	fba1 1303 	umull	r1, r3, r1, r3
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM2_IRQHandler+0x28>)
 8001134:	f002 f912 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000d8 	.word	0x200000d8
 8001140:	20000000 	.word	0x20000000
 8001144:	51eb851f 	.word	0x51eb851f

08001148 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM3_IRQHandler+0x10>)
 800114e:	f002 f905 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000120 	.word	0x20000120

0800115c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM4_IRQHandler+0x10>)
 8001162:	f002 f8fb 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000168 	.word	0x20000168

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f003 fcb4 	bl	8004b0c <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20020000 	.word	0x20020000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	2000028c 	.word	0x2000028c
 80011d8:	200002a8 	.word	0x200002a8

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffd7 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f003 fc73 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff f9bf 	bl	80005b4 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001244:	080054e0 	.word	0x080054e0
  ldr r2, =_sbss
 8001248:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800124c:	200002a4 	.word	0x200002a4

08001250 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <CAN1_RX0_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 fdb7 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd72 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fdcf 	bl	8001e5a <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d4:	f000 fd97 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000004 	.word	0x20000004
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000290 	.word	0x20000290

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000290 	.word	0x20000290

08001338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e033      	b.n	80013b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fd32 	bl	8000dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800137e:	f023 0302 	bic.w	r3, r3, #2
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fb5a 	bl	8001a44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
 80013a6:	e001      	b.n	80013ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Start_IT+0x1a>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e0bd      	b.n	8001556 <HAL_ADC_Start_IT+0x196>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d018      	beq.n	8001422 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_ADC_Start_IT+0x1a4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a58      	ldr	r2, [pc, #352]	; (8001568 <HAL_ADC_Start_IT+0x1a8>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9a      	lsrs	r2, r3, #18
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001414:	e002      	b.n	800141c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	f040 8085 	bne.w	800153c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800145c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001470:	d106      	bne.n	8001480 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f023 0206 	bic.w	r2, r3, #6
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
 800147e:	e002      	b.n	8001486 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_ADC_Start_IT+0x1ac>)
 8001490:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800149a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014aa:	f043 0320 	orr.w	r3, r3, #32
 80014ae:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d12a      	bne.n	8001512 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <HAL_ADC_Start_IT+0x1b0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d015      	beq.n	80014f2 <HAL_ADC_Start_IT+0x132>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <HAL_ADC_Start_IT+0x1b4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_Start_IT+0x11c>
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_ADC_Start_IT+0x1ac>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00a      	beq.n	80014f2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <HAL_ADC_Start_IT+0x1b8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d136      	bne.n	8001554 <HAL_ADC_Start_IT+0x194>
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_ADC_Start_IT+0x1ac>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d130      	bne.n	8001554 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d129      	bne.n	8001554 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e020      	b.n	8001554 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_ADC_Start_IT+0x1b0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11b      	bne.n	8001554 <HAL_ADC_Start_IT+0x194>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d114      	bne.n	8001554 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	e00b      	b.n	8001554 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f043 0210 	orr.w	r2, r3, #16
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000004 	.word	0x20000004
 8001568:	431bde83 	.word	0x431bde83
 800156c:	40012300 	.word	0x40012300
 8001570:	40012000 	.word	0x40012000
 8001574:	40012100 	.word	0x40012100
 8001578:	40012200 	.word	0x40012200

0800157c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d049      	beq.n	8001646 <HAL_ADC_IRQHandler+0xca>
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d046      	beq.n	8001646 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d12b      	bne.n	8001636 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d127      	bne.n	8001636 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0220 	bic.w	r2, r2, #32
 8001610:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fa82 	bl	8000b40 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0212 	mvn.w	r2, #18
 8001644:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d057      	beq.n	800170c <HAL_ADC_IRQHandler+0x190>
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d054      	beq.n	800170c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d139      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d12b      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d124      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11d      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d119      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fa9d 	bl	8001c3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f06f 020c 	mvn.w	r2, #12
 800170a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d017      	beq.n	8001752 <HAL_ADC_IRQHandler+0x1d6>
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d014      	beq.n	8001752 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10d      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f837 	bl	80017b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0201 	mvn.w	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001760:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_ADC_IRQHandler+0x218>
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d012      	beq.n	8001794 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f06f 0220 	mvn.w	r2, #32
 8001782:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f820 	bl	80017ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f06f 0220 	mvn.w	r2, #32
 8001792:	601a      	str	r2, [r3, #0]
  }
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e113      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x244>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d925      	bls.n	8001858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	3b1e      	subs	r3, #30
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e022      	b.n	800189e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	2207      	movs	r2, #7
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	4603      	mov	r3, r0
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4403      	add	r3, r0
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d824      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b05      	subs	r3, #5
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b05      	subs	r3, #5
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	e04c      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b23      	subs	r3, #35	; 0x23
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	; 0x23
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
 8001940:	e023      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b41      	subs	r3, #65	; 0x41
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b41      	subs	r3, #65	; 0x41
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_ADC_ConfigChannel+0x250>)
 800198c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_ADC_ConfigChannel+0x254>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d10f      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b12      	cmp	r3, #18
 800199e:	d10b      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_ADC_ConfigChannel+0x254>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_ADC_ConfigChannel+0x258>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x1f4>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d122      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_ADC_ConfigChannel+0x258>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d111      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_ADC_ConfigChannel+0x25c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_ADC_ConfigChannel+0x260>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9a      	lsrs	r2, r3, #18
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40012300 	.word	0x40012300
 8001a34:	40012000 	.word	0x40012000
 8001a38:	10000012 	.word	0x10000012
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4c:	4b79      	ldr	r3, [pc, #484]	; (8001c34 <ADC_Init+0x1f0>)
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	021a      	lsls	r2, r3, #8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <ADC_Init+0x1f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e00f      	b.n	8001b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0202 	bic.w	r2, r2, #2
 8001b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
 8001b5c:	005a      	lsls	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	035a      	lsls	r2, r3, #13
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e007      	b.n	8001bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051a      	lsls	r2, r3, #20
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfa:	025a      	lsls	r2, r3, #9
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	029a      	lsls	r2, r3, #10
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40012300 	.word	0x40012300
 8001c38:	0f000001 	.word	0x0f000001

08001c3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e165      	b.n	800215c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8154 	bne.w	8002156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80ae 	beq.w	8002156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_GPIO_Init+0x300>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x308>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x21a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_GPIO_Init+0x30c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x216>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x310>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x212>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_GPIO_Init+0x314>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_GPIO_Init+0x318>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x20a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x31c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x206>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x320>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x202>
 8002072:	2306      	movs	r3, #6
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002076:	2307      	movs	r3, #7
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x21c>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d2:	4a31      	ldr	r2, [pc, #196]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x324>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae96 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0cc      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d90c      	bls.n	800220c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b65      	ldr	r3, [pc, #404]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d044      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d119      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	2b03      	cmp	r3, #3
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e067      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4934      	ldr	r1, [pc, #208]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7ff f82e 	bl	8001320 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff f82a 	bl	8001320 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e04f      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d20c      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f855 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ff8e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00
 800238c:	40023800 	.word	0x40023800
 8002390:	08005484 	.word	0x08005484
 8002394:	20000004 	.word	0x20000004
 8002398:	20000008 	.word	0x20000008

0800239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b8:	f7ff fff0 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0a9b      	lsrs	r3, r3, #10
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08005494 	.word	0x08005494

080023dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023e0:	f7ff ffdc 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0b5b      	lsrs	r3, r3, #13
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08005494 	.word	0x08005494

08002404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b0a6      	sub	sp, #152	; 0x98
 800240a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242a:	4bc8      	ldr	r3, [pc, #800]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b0c      	cmp	r3, #12
 8002434:	f200 817e 	bhi.w	8002734 <HAL_RCC_GetSysClockFreq+0x330>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002475 	.word	0x08002475
 8002444:	08002735 	.word	0x08002735
 8002448:	08002735 	.word	0x08002735
 800244c:	08002735 	.word	0x08002735
 8002450:	0800247d 	.word	0x0800247d
 8002454:	08002735 	.word	0x08002735
 8002458:	08002735 	.word	0x08002735
 800245c:	08002735 	.word	0x08002735
 8002460:	08002485 	.word	0x08002485
 8002464:	08002735 	.word	0x08002735
 8002468:	08002735 	.word	0x08002735
 800246c:	08002735 	.word	0x08002735
 8002470:	080025ef 	.word	0x080025ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4bb6      	ldr	r3, [pc, #728]	; (8002750 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800247a:	e15f      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247c:	4bb5      	ldr	r3, [pc, #724]	; (8002754 <HAL_RCC_GetSysClockFreq+0x350>)
 800247e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002482:	e15b      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4bb1      	ldr	r3, [pc, #708]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002490:	4bae      	ldr	r3, [pc, #696]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d031      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249c:	4bab      	ldr	r3, [pc, #684]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	2200      	movs	r2, #0
 80024a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	663b      	str	r3, [r7, #96]	; 0x60
 80024b0:	2300      	movs	r3, #0
 80024b2:	667b      	str	r3, [r7, #100]	; 0x64
 80024b4:	4ba7      	ldr	r3, [pc, #668]	; (8002754 <HAL_RCC_GetSysClockFreq+0x350>)
 80024b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024ba:	462a      	mov	r2, r5
 80024bc:	fb03 f202 	mul.w	r2, r3, r2
 80024c0:	2300      	movs	r3, #0
 80024c2:	4621      	mov	r1, r4
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	4aa2      	ldr	r2, [pc, #648]	; (8002754 <HAL_RCC_GetSysClockFreq+0x350>)
 80024cc:	4621      	mov	r1, r4
 80024ce:	fba1 1202 	umull	r1, r2, r1, r2
 80024d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024d4:	460a      	mov	r2, r1
 80024d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80024d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024da:	4413      	add	r3, r2
 80024dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e2:	2200      	movs	r2, #0
 80024e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80024e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024f0:	f7fd fede 	bl	80002b0 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024fe:	e064      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002500:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	2200      	movs	r2, #0
 8002508:	653b      	str	r3, [r7, #80]	; 0x50
 800250a:	657a      	str	r2, [r7, #84]	; 0x54
 800250c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
 8002514:	2300      	movs	r3, #0
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002518:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800251c:	4622      	mov	r2, r4
 800251e:	462b      	mov	r3, r5
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	0159      	lsls	r1, r3, #5
 800252a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252e:	0150      	lsls	r0, r2, #5
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4621      	mov	r1, r4
 8002536:	1a51      	subs	r1, r2, r1
 8002538:	6139      	str	r1, [r7, #16]
 800253a:	4629      	mov	r1, r5
 800253c:	eb63 0301 	sbc.w	r3, r3, r1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800254e:	4659      	mov	r1, fp
 8002550:	018b      	lsls	r3, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002558:	4651      	mov	r1, sl
 800255a:	018a      	lsls	r2, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ebb2 0801 	subs.w	r8, r2, r1
 8002562:	4659      	mov	r1, fp
 8002564:	eb63 0901 	sbc.w	r9, r3, r1
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257c:	4690      	mov	r8, r2
 800257e:	4699      	mov	r9, r3
 8002580:	4623      	mov	r3, r4
 8002582:	eb18 0303 	adds.w	r3, r8, r3
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	462b      	mov	r3, r5
 800258a:	eb49 0303 	adc.w	r3, r9, r3
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800259c:	4629      	mov	r1, r5
 800259e:	028b      	lsls	r3, r1, #10
 80025a0:	4621      	mov	r1, r4
 80025a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a6:	4621      	mov	r1, r4
 80025a8:	028a      	lsls	r2, r1, #10
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b2:	2200      	movs	r2, #0
 80025b4:	643b      	str	r3, [r7, #64]	; 0x40
 80025b6:	647a      	str	r2, [r7, #68]	; 0x44
 80025b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025bc:	f7fd fe78 	bl	80002b0 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4613      	mov	r3, r2
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ca:	4b60      	ldr	r3, [pc, #384]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c1b      	lsrs	r3, r3, #16
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	3301      	adds	r3, #1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80025dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80025ec:	e0a6      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02a      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	2200      	movs	r2, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002610:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002618:	2100      	movs	r1, #0
 800261a:	4b4e      	ldr	r3, [pc, #312]	; (8002754 <HAL_RCC_GetSysClockFreq+0x350>)
 800261c:	fb03 f201 	mul.w	r2, r3, r1
 8002620:	2300      	movs	r3, #0
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	4413      	add	r3, r2
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_RCC_GetSysClockFreq+0x350>)
 800262a:	fba0 1202 	umull	r1, r2, r0, r2
 800262e:	677a      	str	r2, [r7, #116]	; 0x74
 8002630:	460a      	mov	r2, r1
 8002632:	673a      	str	r2, [r7, #112]	; 0x70
 8002634:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002636:	4413      	add	r3, r2
 8002638:	677b      	str	r3, [r7, #116]	; 0x74
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263e:	2200      	movs	r2, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	637a      	str	r2, [r7, #52]	; 0x34
 8002644:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002648:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800264c:	f7fd fe30 	bl	80002b0 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800265a:	e05b      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
 8002666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002678:	4642      	mov	r2, r8
 800267a:	464b      	mov	r3, r9
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	0159      	lsls	r1, r3, #5
 8002686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268a:	0150      	lsls	r0, r2, #5
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4641      	mov	r1, r8
 8002692:	ebb2 0a01 	subs.w	sl, r2, r1
 8002696:	4649      	mov	r1, r9
 8002698:	eb63 0b01 	sbc.w	fp, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b0:	ebb2 040a 	subs.w	r4, r2, sl
 80026b4:	eb63 050b 	sbc.w	r5, r3, fp
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb45 0303 	adc.w	r3, r5, r3
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e6:	4629      	mov	r1, r5
 80026e8:	028b      	lsls	r3, r1, #10
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f0:	4621      	mov	r1, r4
 80026f2:	028a      	lsls	r2, r1, #10
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fc:	2200      	movs	r2, #0
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	61fa      	str	r2, [r7, #28]
 8002702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002706:	f7fd fdd3 	bl	80002b0 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4613      	mov	r3, r2
 8002710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCC_GetSysClockFreq+0x348>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0f1b      	lsrs	r3, r3, #28
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002732:	e003      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800273a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002740:	4618      	mov	r0, r3
 8002742:	3798      	adds	r7, #152	; 0x98
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400
 8002754:	017d7840 	.word	0x017d7840

08002758 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e28d      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8083 	beq.w	800287e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002778:	4b94      	ldr	r3, [pc, #592]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b04      	cmp	r3, #4
 8002782:	d019      	beq.n	80027b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002784:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800278c:	2b08      	cmp	r3, #8
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002790:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d00c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d112      	bne.n	80027d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b6:	d10b      	bne.n	80027d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b84      	ldr	r3, [pc, #528]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05b      	beq.n	800287c <HAL_RCC_OscConfig+0x124>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d157      	bne.n	800287c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e25a      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x90>
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7b      	ldr	r2, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xcc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0xb4>
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a72      	ldr	r2, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xcc>
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6e      	ldr	r2, [pc, #440]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fd78 	bl	8001320 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe fd74 	bl	8001320 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e21f      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xdc>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fd64 	bl	8001320 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe fd60 	bl	8001320 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e20b      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x104>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06f      	beq.n	800296a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002896:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028a2:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b44      	ldr	r3, [pc, #272]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x186>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1d3      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_OscConfig+0x278>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fd0d 	bl	8001320 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fd09 	bl	8001320 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1b4      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4925      	ldr	r1, [pc, #148]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x278>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fcec 	bl	8001320 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7fe fce8 	bl	8001320 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e193      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d036      	beq.n	80029e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x27c>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fccc 	bl	8001320 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fcc8 	bl	8001320 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e173      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x274>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x234>
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x27c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fcb5 	bl	8001320 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e00e      	b.n	80029d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fcb1 	bl	8001320 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d907      	bls.n	80029d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e15c      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470000 	.word	0x42470000
 80029d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ea      	bne.n	80029ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8097 	beq.w	8002b20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <HAL_RCC_OscConfig+0x4b0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x4b0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x4b0>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc71 	bl	8001320 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe fc6d 	bl	8001320 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e118      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x4b0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x31e>
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x358>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x340>
 8002a7e:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a60      	ldr	r2, [pc, #384]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x358>
 8002a98:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a59      	ldr	r2, [pc, #356]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fc32 	bl	8001320 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fc2e 	bl	8001320 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0d7      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ee      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x368>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fc1c 	bl	8001320 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fc18 	bl	8001320 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0c1      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4a3a      	ldr	r2, [pc, #232]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80ad 	beq.w	8002c84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d060      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d145      	bne.n	8002bca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCC_OscConfig+0x4b4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fbec 	bl	8001320 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fbe8 	bl	8001320 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e093      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	491b      	ldr	r1, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x4b4>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fbbd 	bl	8001320 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe fbb9 	bl	8001320 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e064      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x452>
 8002bc8:	e05c      	b.n	8002c84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_OscConfig+0x4b4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fba6 	bl	8001320 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fba2 	bl	8001320 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04d      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x480>
 8002bf6:	e045      	b.n	8002c84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e040      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <HAL_RCC_OscConfig+0x538>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d030      	beq.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d129      	bne.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d122      	bne.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d119      	bne.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d10f      	bne.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f8cc 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fe8e 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800

08002e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f839 	bl	8002eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fdce 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_TIM_PWM_Start+0x24>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e022      	b.n	8002f32 <HAL_TIM_PWM_Start+0x6a>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d109      	bne.n	8002f06 <HAL_TIM_PWM_Start+0x3e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e015      	b.n	8002f32 <HAL_TIM_PWM_Start+0x6a>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d109      	bne.n	8002f20 <HAL_TIM_PWM_Start+0x58>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e008      	b.n	8002f32 <HAL_TIM_PWM_Start+0x6a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07c      	b.n	8003034 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x82>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f48:	e013      	b.n	8002f72 <HAL_TIM_PWM_Start+0xaa>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x92>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f58:	e00b      	b.n	8002f72 <HAL_TIM_PWM_Start+0xaa>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	e003      	b.n	8002f72 <HAL_TIM_PWM_Start+0xaa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f94e 	bl	800421c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_TIM_PWM_Start+0x174>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_PWM_Start+0xcc>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_TIM_PWM_Start+0x178>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_PWM_Start+0xd0>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_PWM_Start+0xd2>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_TIM_PWM_Start+0x174>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d022      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d01d      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_TIM_PWM_Start+0x17c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_TIM_PWM_Start+0x180>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_TIM_PWM_Start+0x184>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIM_PWM_Start+0x178>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_TIM_PWM_Start+0x188>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x136>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_TIM_PWM_Start+0x18c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d010      	beq.n	8003032 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003020:	e007      	b.n	8003032 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010000 	.word	0x40010000
 8003040:	40010400 	.word	0x40010400
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40014000 	.word	0x40014000
 8003054:	40001800 	.word	0x40001800

08003058 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e041      	b.n	80030ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f839 	bl	80030f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 fcac 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_IC_Start_IT+0x1e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e013      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_IC_Start_IT+0x2e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e00b      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_IT+0x3e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e003      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_TIM_IC_Start_IT+0x58>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e013      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d104      	bne.n	8003174 <HAL_TIM_IC_Start_IT+0x68>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e00b      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d104      	bne.n	8003184 <HAL_TIM_IC_Start_IT+0x78>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e003      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318a:	b2db      	uxtb	r3, r3
 800318c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800318e:	7bbb      	ldrb	r3, [r7, #14]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0cc      	b.n	8003338 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Start_IT+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0xb2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0xc2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0xda>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e4:	e013      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_IC_Start_IT+0xea>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f4:	e00b      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_IC_Start_IT+0xfa>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003204:	e003      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d841      	bhi.n	8003298 <HAL_TIM_IC_Start_IT+0x18c>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_IC_Start_IT+0x110>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003251 	.word	0x08003251
 8003220:	08003299 	.word	0x08003299
 8003224:	08003299 	.word	0x08003299
 8003228:	08003299 	.word	0x08003299
 800322c:	08003263 	.word	0x08003263
 8003230:	08003299 	.word	0x08003299
 8003234:	08003299 	.word	0x08003299
 8003238:	08003299 	.word	0x08003299
 800323c:	08003275 	.word	0x08003275
 8003240:	08003299 	.word	0x08003299
 8003244:	08003299 	.word	0x08003299
 8003248:	08003299 	.word	0x08003299
 800324c:	08003287 	.word	0x08003287
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0202 	orr.w	r2, r2, #2
 800325e:	60da      	str	r2, [r3, #12]
      break;
 8003260:	e01d      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0204 	orr.w	r2, r2, #4
 8003270:	60da      	str	r2, [r3, #12]
      break;
 8003272:	e014      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	60da      	str	r2, [r3, #12]
      break;
 8003284:	e00b      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0210 	orr.w	r2, r2, #16
 8003294:	60da      	str	r2, [r3, #12]
      break;
 8003296:	e002      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	bf00      	nop
  }

  if (status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d148      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2201      	movs	r2, #1
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 ffb5 	bl	800421c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_TIM_IC_Start_IT+0x234>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d01d      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_TIM_IC_Start_IT+0x238>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_TIM_IC_Start_IT+0x23c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_TIM_IC_Start_IT+0x240>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_TIM_IC_Start_IT+0x244>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_TIM_IC_Start_IT+0x248>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <HAL_TIM_IC_Start_IT+0x24c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d010      	beq.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003324:	e007      	b.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40010000 	.word	0x40010000
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40010400 	.word	0x40010400
 8003354:	40014000 	.word	0x40014000
 8003358:	40001800 	.word	0x40001800

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0202 	mvn.w	r2, #2
 8003388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fc0c 	bl	8000bbc <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fb05 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fb0c 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fbe2 	bl	8000bbc <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fadb 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fae2 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fbb8 	bl	8000bbc <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fab1 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fab8 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fb8e 	bl	8000bbc <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa87 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fa8e 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fc18 	bl	8000d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ff34 	bl	8004374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa53 	bl	80039de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d10e      	bne.n	8003564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b20      	cmp	r3, #32
 8003552:	d107      	bne.n	8003564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0220 	mvn.w	r2, #32
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fefe 	bl	8004360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003586:	2302      	movs	r3, #2
 8003588:	e088      	b.n	800369c <HAL_TIM_IC_ConfigChannel+0x130>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f000 fc74 	bl	8003e94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 020c 	bic.w	r2, r2, #12
 80035ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
 80035ce:	e060      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d11c      	bne.n	8003610 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 fcf8 	bl	8003fda <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6999      	ldr	r1, [r3, #24]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	619a      	str	r2, [r3, #24]
 800360e:	e040      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11b      	bne.n	800364e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 fd45 	bl	80040b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 020c 	bic.w	r2, r2, #12
 8003638:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
 800364c:	e021      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d11c      	bne.n	800368e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f000 fd62 	bl	800412c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003676:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69d9      	ldr	r1, [r3, #28]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	61da      	str	r2, [r3, #28]
 800368c:	e001      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0ae      	b.n	8003820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	f200 809f 	bhi.w	8003810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	08003811 	.word	0x08003811
 80036e0:	08003811 	.word	0x08003811
 80036e4:	08003811 	.word	0x08003811
 80036e8:	0800374d 	.word	0x0800374d
 80036ec:	08003811 	.word	0x08003811
 80036f0:	08003811 	.word	0x08003811
 80036f4:	08003811 	.word	0x08003811
 80036f8:	0800378f 	.word	0x0800378f
 80036fc:	08003811 	.word	0x08003811
 8003700:	08003811 	.word	0x08003811
 8003704:	08003811 	.word	0x08003811
 8003708:	080037cf 	.word	0x080037cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fa0e 	bl	8003b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
      break;
 800374a:	e064      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fa5e 	bl	8003c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	619a      	str	r2, [r3, #24]
      break;
 800378c:	e043      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fab3 	bl	8003d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0208 	orr.w	r2, r2, #8
 80037a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0204 	bic.w	r2, r2, #4
 80037b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]
      break;
 80037cc:	e023      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fb07 	bl	8003de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
      break;
 800380e:	e002      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIM_ConfigClockSource+0x1c>
 8003840:	2302      	movs	r3, #2
 8003842:	e0b4      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x186>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387c:	d03e      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0xd4>
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003882:	f200 8087 	bhi.w	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	f000 8086 	beq.w	800399a <HAL_TIM_ConfigClockSource+0x172>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d87f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d01a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xa6>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d87b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d050      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x11a>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d877      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d03c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xfa>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d873      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d058      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x13a>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d86f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d064      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d86b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d060      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d867      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05c      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d05a      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	e062      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f000 fc7d 	bl	80041dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
      break;
 80038fa:	e04f      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f000 fc66 	bl	80041dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391e:	609a      	str	r2, [r3, #8]
      break;
 8003920:	e03c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	461a      	mov	r2, r3
 8003930:	f000 fb24 	bl	8003f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2150      	movs	r1, #80	; 0x50
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fc33 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003940:	e02c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	461a      	mov	r2, r3
 8003950:	f000 fb80 	bl	8004054 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2160      	movs	r1, #96	; 0x60
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fc23 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003960:	e01c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	461a      	mov	r2, r3
 8003970:	f000 fb04 	bl	8003f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fc13 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003980:	e00c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f000 fc0a 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 8003992:	e003      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e000      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <TIM_Base_SetConfig+0x118>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <TIM_Base_SetConfig+0x11c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <TIM_Base_SetConfig+0x120>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d027      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <TIM_Base_SetConfig+0x118>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d023      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <TIM_Base_SetConfig+0x11c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <TIM_Base_SetConfig+0x120>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <TIM_Base_SetConfig+0x128>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40001800 	.word	0x40001800
 8003b2c:	40001c00 	.word	0x40001c00
 8003b30:	40002000 	.word	0x40002000

08003b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 0302 	bic.w	r3, r3, #2
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <TIM_OC1_SetConfig+0xd8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_OC1_SetConfig+0x64>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <TIM_OC1_SetConfig+0xdc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10c      	bne.n	8003bb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0308 	bic.w	r3, r3, #8
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <TIM_OC1_SetConfig+0xd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_OC1_SetConfig+0x8e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <TIM_OC1_SetConfig+0xdc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d111      	bne.n	8003be6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40010400 	.word	0x40010400

08003c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0210 	bic.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0320 	bic.w	r3, r3, #32
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <TIM_OC2_SetConfig+0xe4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_OC2_SetConfig+0x68>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <TIM_OC2_SetConfig+0xe8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10d      	bne.n	8003c98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <TIM_OC2_SetConfig+0xe4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC2_SetConfig+0x94>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <TIM_OC2_SetConfig+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d113      	bne.n	8003cd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

08003d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <TIM_OC3_SetConfig+0xe0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0x66>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <TIM_OC3_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10d      	bne.n	8003d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <TIM_OC3_SetConfig+0xe0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC3_SetConfig+0x92>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <TIM_OC3_SetConfig+0xe4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d113      	bne.n	8003dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400

08003de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	031b      	lsls	r3, r3, #12
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <TIM_OC4_SetConfig+0xa4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_OC4_SetConfig+0x68>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a11      	ldr	r2, [pc, #68]	; (8003e90 <TIM_OC4_SetConfig+0xa8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d109      	bne.n	8003e64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a28      	ldr	r2, [pc, #160]	; (8003f60 <TIM_TI1_SetConfig+0xcc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01b      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d017      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <TIM_TI1_SetConfig+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <TIM_TI1_SetConfig+0xd4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <TIM_TI1_SetConfig+0xd8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <TIM_TI1_SetConfig+0xdc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <TIM_TI1_SetConfig+0xe0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_TI1_SetConfig+0x66>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <TIM_TI1_SetConfig+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <TIM_TI1_SetConfig+0x6a>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <TIM_TI1_SetConfig+0x6c>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e003      	b.n	8003f1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f023 030a 	bic.w	r3, r3, #10
 8003f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f003 030a 	and.w	r3, r3, #10
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40001800 	.word	0x40001800

08003f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 030a 	bic.w	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f023 0210 	bic.w	r2, r3, #16
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004006:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	b29b      	uxth	r3, r3
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	621a      	str	r2, [r3, #32]
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f023 0210 	bic.w	r2, r3, #16
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	031b      	lsls	r3, r3, #12
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004090:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 0303 	bic.w	r3, r3, #3
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004104:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	621a      	str	r2, [r3, #32]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004158:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	b29b      	uxth	r3, r3
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f043 0307 	orr.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	431a      	orrs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2201      	movs	r2, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e05a      	b.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a21      	ldr	r2, [pc, #132]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d01d      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d018      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10c      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4313      	orrs	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40010400 	.word	0x40010400
 8004358:	40014000 	.word	0x40014000
 800435c:	40001800 	.word	0x40001800

08004360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e03f      	b.n	800441a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fe34 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f929 	bl	8004624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08a      	sub	sp, #40	; 0x28
 8004426:	af02      	add	r7, sp, #8
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	d17c      	bne.n	800453c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_Transmit+0x2c>
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e075      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UART_Transmit+0x3e>
 800445c:	2302      	movs	r3, #2
 800445e:	e06e      	b.n	800453e <HAL_UART_Transmit+0x11c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	; 0x21
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004476:	f7fc ff53 	bl	8001320 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b4:	e02a      	b.n	800450c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f840 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e036      	b.n	800453e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3302      	adds	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e007      	b.n	80044fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cf      	bne.n	80044b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f810 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b090      	sub	sp, #64	; 0x40
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	e050      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455e:	d04c      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <UART_WaitOnFlagUntilTimeout+0x30>
 8004566:	f7fc fedb 	bl	8001320 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004572:	429a      	cmp	r2, r3
 8004574:	d241      	bcs.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004596:	637a      	str	r2, [r7, #52]	; 0x34
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e5      	bne.n	8004576 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ca:	623a      	str	r2, [r7, #32]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00f      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d09f      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3740      	adds	r7, #64	; 0x40
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b0c0      	sub	sp, #256	; 0x100
 800462a:	af00      	add	r7, sp, #0
 800462c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	68d9      	ldr	r1, [r3, #12]
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	ea40 0301 	orr.w	r3, r0, r1
 800464c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	431a      	orrs	r2, r3
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800467c:	f021 010c 	bic.w	r1, r1, #12
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800468a:	430b      	orrs	r3, r1
 800468c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	6999      	ldr	r1, [r3, #24]
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	ea40 0301 	orr.w	r3, r0, r1
 80046aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b8f      	ldr	r3, [pc, #572]	; (80048f0 <UART_SetConfig+0x2cc>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d005      	beq.n	80046c4 <UART_SetConfig+0xa0>
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b8d      	ldr	r3, [pc, #564]	; (80048f4 <UART_SetConfig+0x2d0>)
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d104      	bne.n	80046ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7fd fe8a 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80046c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046cc:	e003      	b.n	80046d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ce:	f7fd fe71 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 80046d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e0:	f040 810c 	bne.w	80048fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	1891      	adds	r1, r2, r2
 80046fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80046fe:	415b      	adcs	r3, r3
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004706:	4621      	mov	r1, r4
 8004708:	eb12 0801 	adds.w	r8, r2, r1
 800470c:	4629      	mov	r1, r5
 800470e:	eb43 0901 	adc.w	r9, r3, r1
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004726:	4690      	mov	r8, r2
 8004728:	4699      	mov	r9, r3
 800472a:	4623      	mov	r3, r4
 800472c:	eb18 0303 	adds.w	r3, r8, r3
 8004730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004734:	462b      	mov	r3, r5
 8004736:	eb49 0303 	adc.w	r3, r9, r3
 800473a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800474a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800474e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004752:	460b      	mov	r3, r1
 8004754:	18db      	adds	r3, r3, r3
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	4613      	mov	r3, r2
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
 8004760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004768:	f7fb fda2 	bl	80002b0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <UART_SetConfig+0x2d4>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011c      	lsls	r4, r3, #4
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004784:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	64b9      	str	r1, [r7, #72]	; 0x48
 8004794:	415b      	adcs	r3, r3
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800479c:	4641      	mov	r1, r8
 800479e:	eb12 0a01 	adds.w	sl, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0b01 	adc.w	fp, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047bc:	4692      	mov	sl, r2
 80047be:	469b      	mov	fp, r3
 80047c0:	4643      	mov	r3, r8
 80047c2:	eb1a 0303 	adds.w	r3, sl, r3
 80047c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ca:	464b      	mov	r3, r9
 80047cc:	eb4b 0303 	adc.w	r3, fp, r3
 80047d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047e8:	460b      	mov	r3, r1
 80047ea:	18db      	adds	r3, r3, r3
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
 80047ee:	4613      	mov	r3, r2
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
 80047f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047fe:	f7fb fd57 	bl	80002b0 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4611      	mov	r1, r2
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <UART_SetConfig+0x2d4>)
 800480a:	fba3 2301 	umull	r2, r3, r3, r1
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2264      	movs	r2, #100	; 0x64
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	1acb      	subs	r3, r1, r3
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <UART_SetConfig+0x2d4>)
 8004820:	fba3 2302 	umull	r2, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800482c:	441c      	add	r4, r3
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800483c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	63b9      	str	r1, [r7, #56]	; 0x38
 8004848:	415b      	adcs	r3, r3
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6339      	str	r1, [r7, #48]	; 0x30
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800489c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a4:	460b      	mov	r3, r1
 80048a6:	18db      	adds	r3, r3, r3
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048aa:	4613      	mov	r3, r2
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ba:	f7fb fcf9 	bl	80002b0 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <UART_SetConfig+0x2d4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <UART_SetConfig+0x2d4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 0207 	and.w	r2, r3, #7
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048ec:	e105      	b.n	8004afa <UART_SetConfig+0x4d6>
 80048ee:	bf00      	nop
 80048f0:	40011000 	.word	0x40011000
 80048f4:	40011400 	.word	0x40011400
 80048f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004900:	2200      	movs	r2, #0
 8004902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800490a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800490e:	4642      	mov	r2, r8
 8004910:	464b      	mov	r3, r9
 8004912:	1891      	adds	r1, r2, r2
 8004914:	6239      	str	r1, [r7, #32]
 8004916:	415b      	adcs	r3, r3
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491e:	4641      	mov	r1, r8
 8004920:	1854      	adds	r4, r2, r1
 8004922:	4649      	mov	r1, r9
 8004924:	eb43 0501 	adc.w	r5, r3, r1
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004944:	464b      	mov	r3, r9
 8004946:	eb45 0303 	adc.w	r3, r5, r3
 800494a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800496a:	4629      	mov	r1, r5
 800496c:	008b      	lsls	r3, r1, #2
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004974:	4621      	mov	r1, r4
 8004976:	008a      	lsls	r2, r1, #2
 8004978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800497c:	f7fb fc98 	bl	80002b0 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004986:	fba3 2302 	umull	r2, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	011c      	lsls	r4, r3, #4
 800498e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800499c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	1891      	adds	r1, r2, r2
 80049a6:	61b9      	str	r1, [r7, #24]
 80049a8:	415b      	adcs	r3, r3
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b0:	4641      	mov	r1, r8
 80049b2:	1851      	adds	r1, r2, r1
 80049b4:	6139      	str	r1, [r7, #16]
 80049b6:	4649      	mov	r1, r9
 80049b8:	414b      	adcs	r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	00cb      	lsls	r3, r1, #3
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d2:	4651      	mov	r1, sl
 80049d4:	00ca      	lsls	r2, r1, #3
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	4642      	mov	r2, r8
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e4:	464b      	mov	r3, r9
 80049e6:	460a      	mov	r2, r1
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a08:	4649      	mov	r1, r9
 8004a0a:	008b      	lsls	r3, r1, #2
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a12:	4641      	mov	r1, r8
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a1a:	f7fb fc49 	bl	80002b0 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	; 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	3332      	adds	r3, #50	; 0x32
 8004a36:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a42:	441c      	add	r4, r3
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a62:	4641      	mov	r1, r8
 8004a64:	1851      	adds	r1, r2, r1
 8004a66:	6039      	str	r1, [r7, #0]
 8004a68:	4649      	mov	r1, r9
 8004a6a:	414b      	adcs	r3, r1
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	00cb      	lsls	r3, r1, #3
 8004a7e:	4651      	mov	r1, sl
 8004a80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a84:	4651      	mov	r1, sl
 8004a86:	00ca      	lsls	r2, r1, #3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4642      	mov	r2, r8
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa8:	667a      	str	r2, [r7, #100]	; 0x64
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	008b      	lsls	r3, r1, #2
 8004aba:	4641      	mov	r1, r8
 8004abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	008a      	lsls	r2, r1, #2
 8004ac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ac8:	f7fb fbf2 	bl	80002b0 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2164      	movs	r1, #100	; 0x64
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4422      	add	r2, r4
 8004af8:	609a      	str	r2, [r3, #8]
}
 8004afa:	bf00      	nop
 8004afc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	51eb851f 	.word	0x51eb851f

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000010 	.word	0x20000010

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fc8e 	bl	800544c <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	080054d8 	.word	0x080054d8
 8004b54:	080054d8 	.word	0x080054d8
 8004b58:	080054d8 	.word	0x080054d8
 8004b5c:	080054dc 	.word	0x080054dc

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <siprintf>:
 8004b70:	b40e      	push	{r1, r2, r3}
 8004b72:	b500      	push	{lr}
 8004b74:	b09c      	sub	sp, #112	; 0x70
 8004b76:	ab1d      	add	r3, sp, #116	; 0x74
 8004b78:	9002      	str	r0, [sp, #8]
 8004b7a:	9006      	str	r0, [sp, #24]
 8004b7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b80:	4809      	ldr	r0, [pc, #36]	; (8004ba8 <siprintf+0x38>)
 8004b82:	9107      	str	r1, [sp, #28]
 8004b84:	9104      	str	r1, [sp, #16]
 8004b86:	4909      	ldr	r1, [pc, #36]	; (8004bac <siprintf+0x3c>)
 8004b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b8c:	9105      	str	r1, [sp, #20]
 8004b8e:	6800      	ldr	r0, [r0, #0]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	a902      	add	r1, sp, #8
 8004b94:	f000 f868 	bl	8004c68 <_svfiprintf_r>
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	b01c      	add	sp, #112	; 0x70
 8004ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba4:	b003      	add	sp, #12
 8004ba6:	4770      	bx	lr
 8004ba8:	20000010 	.word	0x20000010
 8004bac:	ffff0208 	.word	0xffff0208

08004bb0 <__ssputs_r>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	688e      	ldr	r6, [r1, #8]
 8004bb6:	429e      	cmp	r6, r3
 8004bb8:	4682      	mov	sl, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	4690      	mov	r8, r2
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	d838      	bhi.n	8004c34 <__ssputs_r+0x84>
 8004bc2:	898a      	ldrh	r2, [r1, #12]
 8004bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bc8:	d032      	beq.n	8004c30 <__ssputs_r+0x80>
 8004bca:	6825      	ldr	r5, [r4, #0]
 8004bcc:	6909      	ldr	r1, [r1, #16]
 8004bce:	eba5 0901 	sub.w	r9, r5, r1
 8004bd2:	6965      	ldr	r5, [r4, #20]
 8004bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bdc:	3301      	adds	r3, #1
 8004bde:	444b      	add	r3, r9
 8004be0:	106d      	asrs	r5, r5, #1
 8004be2:	429d      	cmp	r5, r3
 8004be4:	bf38      	it	cc
 8004be6:	461d      	movcc	r5, r3
 8004be8:	0553      	lsls	r3, r2, #21
 8004bea:	d531      	bpl.n	8004c50 <__ssputs_r+0xa0>
 8004bec:	4629      	mov	r1, r5
 8004bee:	f000 fb63 	bl	80052b8 <_malloc_r>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	b950      	cbnz	r0, 8004c0c <__ssputs_r+0x5c>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	f8ca 3000 	str.w	r3, [sl]
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	6921      	ldr	r1, [r4, #16]
 8004c0e:	464a      	mov	r2, r9
 8004c10:	f000 fabe 	bl	8005190 <memcpy>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	6126      	str	r6, [r4, #16]
 8004c22:	6165      	str	r5, [r4, #20]
 8004c24:	444e      	add	r6, r9
 8004c26:	eba5 0509 	sub.w	r5, r5, r9
 8004c2a:	6026      	str	r6, [r4, #0]
 8004c2c:	60a5      	str	r5, [r4, #8]
 8004c2e:	463e      	mov	r6, r7
 8004c30:	42be      	cmp	r6, r7
 8004c32:	d900      	bls.n	8004c36 <__ssputs_r+0x86>
 8004c34:	463e      	mov	r6, r7
 8004c36:	6820      	ldr	r0, [r4, #0]
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	f000 fab6 	bl	80051ac <memmove>
 8004c40:	68a3      	ldr	r3, [r4, #8]
 8004c42:	1b9b      	subs	r3, r3, r6
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	4433      	add	r3, r6
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e7db      	b.n	8004c08 <__ssputs_r+0x58>
 8004c50:	462a      	mov	r2, r5
 8004c52:	f000 fba5 	bl	80053a0 <_realloc_r>
 8004c56:	4606      	mov	r6, r0
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1e1      	bne.n	8004c20 <__ssputs_r+0x70>
 8004c5c:	6921      	ldr	r1, [r4, #16]
 8004c5e:	4650      	mov	r0, sl
 8004c60:	f000 fabe 	bl	80051e0 <_free_r>
 8004c64:	e7c7      	b.n	8004bf6 <__ssputs_r+0x46>
	...

08004c68 <_svfiprintf_r>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	4698      	mov	r8, r3
 8004c6e:	898b      	ldrh	r3, [r1, #12]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	b09d      	sub	sp, #116	; 0x74
 8004c74:	4607      	mov	r7, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	d50e      	bpl.n	8004c9a <_svfiprintf_r+0x32>
 8004c7c:	690b      	ldr	r3, [r1, #16]
 8004c7e:	b963      	cbnz	r3, 8004c9a <_svfiprintf_r+0x32>
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	f000 fb19 	bl	80052b8 <_malloc_r>
 8004c86:	6028      	str	r0, [r5, #0]
 8004c88:	6128      	str	r0, [r5, #16]
 8004c8a:	b920      	cbnz	r0, 8004c96 <_svfiprintf_r+0x2e>
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c94:	e0d1      	b.n	8004e3a <_svfiprintf_r+0x1d2>
 8004c96:	2340      	movs	r3, #64	; 0x40
 8004c98:	616b      	str	r3, [r5, #20]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ca8:	2330      	movs	r3, #48	; 0x30
 8004caa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e54 <_svfiprintf_r+0x1ec>
 8004cae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb2:	f04f 0901 	mov.w	r9, #1
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	469a      	mov	sl, r3
 8004cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cbe:	b10a      	cbz	r2, 8004cc4 <_svfiprintf_r+0x5c>
 8004cc0:	2a25      	cmp	r2, #37	; 0x25
 8004cc2:	d1f9      	bne.n	8004cb8 <_svfiprintf_r+0x50>
 8004cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8004cc8:	d00b      	beq.n	8004ce2 <_svfiprintf_r+0x7a>
 8004cca:	465b      	mov	r3, fp
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f7ff ff6d 	bl	8004bb0 <__ssputs_r>
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f000 80aa 	beq.w	8004e30 <_svfiprintf_r+0x1c8>
 8004cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cde:	445a      	add	r2, fp
 8004ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a2 	beq.w	8004e30 <_svfiprintf_r+0x1c8>
 8004cec:	2300      	movs	r3, #0
 8004cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cf6:	f10a 0a01 	add.w	sl, sl, #1
 8004cfa:	9304      	str	r3, [sp, #16]
 8004cfc:	9307      	str	r3, [sp, #28]
 8004cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d02:	931a      	str	r3, [sp, #104]	; 0x68
 8004d04:	4654      	mov	r4, sl
 8004d06:	2205      	movs	r2, #5
 8004d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d0c:	4851      	ldr	r0, [pc, #324]	; (8004e54 <_svfiprintf_r+0x1ec>)
 8004d0e:	f7fb fa7f 	bl	8000210 <memchr>
 8004d12:	9a04      	ldr	r2, [sp, #16]
 8004d14:	b9d8      	cbnz	r0, 8004d4e <_svfiprintf_r+0xe6>
 8004d16:	06d0      	lsls	r0, r2, #27
 8004d18:	bf44      	itt	mi
 8004d1a:	2320      	movmi	r3, #32
 8004d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d20:	0711      	lsls	r1, r2, #28
 8004d22:	bf44      	itt	mi
 8004d24:	232b      	movmi	r3, #43	; 0x2b
 8004d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d30:	d015      	beq.n	8004d5e <_svfiprintf_r+0xf6>
 8004d32:	9a07      	ldr	r2, [sp, #28]
 8004d34:	4654      	mov	r4, sl
 8004d36:	2000      	movs	r0, #0
 8004d38:	f04f 0c0a 	mov.w	ip, #10
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d42:	3b30      	subs	r3, #48	; 0x30
 8004d44:	2b09      	cmp	r3, #9
 8004d46:	d94e      	bls.n	8004de6 <_svfiprintf_r+0x17e>
 8004d48:	b1b0      	cbz	r0, 8004d78 <_svfiprintf_r+0x110>
 8004d4a:	9207      	str	r2, [sp, #28]
 8004d4c:	e014      	b.n	8004d78 <_svfiprintf_r+0x110>
 8004d4e:	eba0 0308 	sub.w	r3, r0, r8
 8004d52:	fa09 f303 	lsl.w	r3, r9, r3
 8004d56:	4313      	orrs	r3, r2
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	46a2      	mov	sl, r4
 8004d5c:	e7d2      	b.n	8004d04 <_svfiprintf_r+0x9c>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	1d19      	adds	r1, r3, #4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	9103      	str	r1, [sp, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfbb      	ittet	lt
 8004d6a:	425b      	neglt	r3, r3
 8004d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d70:	9307      	strge	r3, [sp, #28]
 8004d72:	9307      	strlt	r3, [sp, #28]
 8004d74:	bfb8      	it	lt
 8004d76:	9204      	strlt	r2, [sp, #16]
 8004d78:	7823      	ldrb	r3, [r4, #0]
 8004d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d7c:	d10c      	bne.n	8004d98 <_svfiprintf_r+0x130>
 8004d7e:	7863      	ldrb	r3, [r4, #1]
 8004d80:	2b2a      	cmp	r3, #42	; 0x2a
 8004d82:	d135      	bne.n	8004df0 <_svfiprintf_r+0x188>
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	9203      	str	r2, [sp, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfb8      	it	lt
 8004d90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d94:	3402      	adds	r4, #2
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e64 <_svfiprintf_r+0x1fc>
 8004d9c:	7821      	ldrb	r1, [r4, #0]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	4650      	mov	r0, sl
 8004da2:	f7fb fa35 	bl	8000210 <memchr>
 8004da6:	b140      	cbz	r0, 8004dba <_svfiprintf_r+0x152>
 8004da8:	2340      	movs	r3, #64	; 0x40
 8004daa:	eba0 000a 	sub.w	r0, r0, sl
 8004dae:	fa03 f000 	lsl.w	r0, r3, r0
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	4303      	orrs	r3, r0
 8004db6:	3401      	adds	r4, #1
 8004db8:	9304      	str	r3, [sp, #16]
 8004dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dbe:	4826      	ldr	r0, [pc, #152]	; (8004e58 <_svfiprintf_r+0x1f0>)
 8004dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dc4:	2206      	movs	r2, #6
 8004dc6:	f7fb fa23 	bl	8000210 <memchr>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d038      	beq.n	8004e40 <_svfiprintf_r+0x1d8>
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <_svfiprintf_r+0x1f4>)
 8004dd0:	bb1b      	cbnz	r3, 8004e1a <_svfiprintf_r+0x1b2>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	3307      	adds	r3, #7
 8004dd6:	f023 0307 	bic.w	r3, r3, #7
 8004dda:	3308      	adds	r3, #8
 8004ddc:	9303      	str	r3, [sp, #12]
 8004dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de0:	4433      	add	r3, r6
 8004de2:	9309      	str	r3, [sp, #36]	; 0x24
 8004de4:	e767      	b.n	8004cb6 <_svfiprintf_r+0x4e>
 8004de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dea:	460c      	mov	r4, r1
 8004dec:	2001      	movs	r0, #1
 8004dee:	e7a5      	b.n	8004d3c <_svfiprintf_r+0xd4>
 8004df0:	2300      	movs	r3, #0
 8004df2:	3401      	adds	r4, #1
 8004df4:	9305      	str	r3, [sp, #20]
 8004df6:	4619      	mov	r1, r3
 8004df8:	f04f 0c0a 	mov.w	ip, #10
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e02:	3a30      	subs	r2, #48	; 0x30
 8004e04:	2a09      	cmp	r2, #9
 8004e06:	d903      	bls.n	8004e10 <_svfiprintf_r+0x1a8>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0c5      	beq.n	8004d98 <_svfiprintf_r+0x130>
 8004e0c:	9105      	str	r1, [sp, #20]
 8004e0e:	e7c3      	b.n	8004d98 <_svfiprintf_r+0x130>
 8004e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e14:	4604      	mov	r4, r0
 8004e16:	2301      	movs	r3, #1
 8004e18:	e7f0      	b.n	8004dfc <_svfiprintf_r+0x194>
 8004e1a:	ab03      	add	r3, sp, #12
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	462a      	mov	r2, r5
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <_svfiprintf_r+0x1f8>)
 8004e22:	a904      	add	r1, sp, #16
 8004e24:	4638      	mov	r0, r7
 8004e26:	f3af 8000 	nop.w
 8004e2a:	1c42      	adds	r2, r0, #1
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	d1d6      	bne.n	8004dde <_svfiprintf_r+0x176>
 8004e30:	89ab      	ldrh	r3, [r5, #12]
 8004e32:	065b      	lsls	r3, r3, #25
 8004e34:	f53f af2c 	bmi.w	8004c90 <_svfiprintf_r+0x28>
 8004e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3a:	b01d      	add	sp, #116	; 0x74
 8004e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e40:	ab03      	add	r3, sp, #12
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	462a      	mov	r2, r5
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <_svfiprintf_r+0x1f8>)
 8004e48:	a904      	add	r1, sp, #16
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f000 f87a 	bl	8004f44 <_printf_i>
 8004e50:	e7eb      	b.n	8004e2a <_svfiprintf_r+0x1c2>
 8004e52:	bf00      	nop
 8004e54:	0800549c 	.word	0x0800549c
 8004e58:	080054a6 	.word	0x080054a6
 8004e5c:	00000000 	.word	0x00000000
 8004e60:	08004bb1 	.word	0x08004bb1
 8004e64:	080054a2 	.word	0x080054a2

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4699      	mov	r9, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb4:	1e13      	subs	r3, r2, #0
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	68e5      	ldr	r5, [r4, #12]
 8004ed2:	6832      	ldr	r2, [r6, #0]
 8004ed4:	f003 0306 	and.w	r3, r3, #6
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	bf08      	it	eq
 8004edc:	1aad      	subeq	r5, r5, r2
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4649      	mov	r1, r9
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c0      	blx	r8
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	7e0f      	ldrb	r7, [r1, #24]
 8004f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f4c:	2f78      	cmp	r7, #120	; 0x78
 8004f4e:	4691      	mov	r9, r2
 8004f50:	4680      	mov	r8, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	469a      	mov	sl, r3
 8004f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	; 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d8 	beq.w	8005116 <_printf_i+0x1d2>
 8004f66:	2f58      	cmp	r7, #88	; 0x58
 8004f68:	f000 80a3 	beq.w	80050b2 <_printf_i+0x16e>
 8004f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a101      	add	r1, pc, #4	; (adr r1, 8004f84 <_printf_i+0x40>)
 8004f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050fd 	.word	0x080050fd
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	080050df 	.word	0x080050df
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	0800511f 	.word	0x0800511f
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050e7 	.word	0x080050e7
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	602a      	str	r2, [r5, #0]
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0a3      	b.n	8005138 <_printf_i+0x1f4>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	6829      	ldr	r1, [r5, #0]
 8004ff4:	0606      	lsls	r6, r0, #24
 8004ff6:	f101 0304 	add.w	r3, r1, #4
 8004ffa:	d50a      	bpl.n	8005012 <_printf_i+0xce>
 8004ffc:	680e      	ldr	r6, [r1, #0]
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	2e00      	cmp	r6, #0
 8005002:	da03      	bge.n	800500c <_printf_i+0xc8>
 8005004:	232d      	movs	r3, #45	; 0x2d
 8005006:	4276      	negs	r6, r6
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	485e      	ldr	r0, [pc, #376]	; (8005188 <_printf_i+0x244>)
 800500e:	230a      	movs	r3, #10
 8005010:	e019      	b.n	8005046 <_printf_i+0x102>
 8005012:	680e      	ldr	r6, [r1, #0]
 8005014:	602b      	str	r3, [r5, #0]
 8005016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800501a:	bf18      	it	ne
 800501c:	b236      	sxthne	r6, r6
 800501e:	e7ef      	b.n	8005000 <_printf_i+0xbc>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	6029      	str	r1, [r5, #0]
 8005028:	0601      	lsls	r1, r0, #24
 800502a:	d501      	bpl.n	8005030 <_printf_i+0xec>
 800502c:	681e      	ldr	r6, [r3, #0]
 800502e:	e002      	b.n	8005036 <_printf_i+0xf2>
 8005030:	0646      	lsls	r6, r0, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0xe8>
 8005034:	881e      	ldrh	r6, [r3, #0]
 8005036:	4854      	ldr	r0, [pc, #336]	; (8005188 <_printf_i+0x244>)
 8005038:	2f6f      	cmp	r7, #111	; 0x6f
 800503a:	bf0c      	ite	eq
 800503c:	2308      	moveq	r3, #8
 800503e:	230a      	movne	r3, #10
 8005040:	2100      	movs	r1, #0
 8005042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005046:	6865      	ldr	r5, [r4, #4]
 8005048:	60a5      	str	r5, [r4, #8]
 800504a:	2d00      	cmp	r5, #0
 800504c:	bfa2      	ittt	ge
 800504e:	6821      	ldrge	r1, [r4, #0]
 8005050:	f021 0104 	bicge.w	r1, r1, #4
 8005054:	6021      	strge	r1, [r4, #0]
 8005056:	b90e      	cbnz	r6, 800505c <_printf_i+0x118>
 8005058:	2d00      	cmp	r5, #0
 800505a:	d04d      	beq.n	80050f8 <_printf_i+0x1b4>
 800505c:	4615      	mov	r5, r2
 800505e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005062:	fb03 6711 	mls	r7, r3, r1, r6
 8005066:	5dc7      	ldrb	r7, [r0, r7]
 8005068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800506c:	4637      	mov	r7, r6
 800506e:	42bb      	cmp	r3, r7
 8005070:	460e      	mov	r6, r1
 8005072:	d9f4      	bls.n	800505e <_printf_i+0x11a>
 8005074:	2b08      	cmp	r3, #8
 8005076:	d10b      	bne.n	8005090 <_printf_i+0x14c>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	07de      	lsls	r6, r3, #31
 800507c:	d508      	bpl.n	8005090 <_printf_i+0x14c>
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6861      	ldr	r1, [r4, #4]
 8005082:	4299      	cmp	r1, r3
 8005084:	bfde      	ittt	le
 8005086:	2330      	movle	r3, #48	; 0x30
 8005088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800508c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005090:	1b52      	subs	r2, r2, r5
 8005092:	6122      	str	r2, [r4, #16]
 8005094:	f8cd a000 	str.w	sl, [sp]
 8005098:	464b      	mov	r3, r9
 800509a:	aa03      	add	r2, sp, #12
 800509c:	4621      	mov	r1, r4
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff fee2 	bl	8004e68 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d14c      	bne.n	8005142 <_printf_i+0x1fe>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ac:	b004      	add	sp, #16
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	4835      	ldr	r0, [pc, #212]	; (8005188 <_printf_i+0x244>)
 80050b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050b8:	6829      	ldr	r1, [r5, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80050c0:	6029      	str	r1, [r5, #0]
 80050c2:	061d      	lsls	r5, r3, #24
 80050c4:	d514      	bpl.n	80050f0 <_printf_i+0x1ac>
 80050c6:	07df      	lsls	r7, r3, #31
 80050c8:	bf44      	itt	mi
 80050ca:	f043 0320 	orrmi.w	r3, r3, #32
 80050ce:	6023      	strmi	r3, [r4, #0]
 80050d0:	b91e      	cbnz	r6, 80050da <_printf_i+0x196>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f023 0320 	bic.w	r3, r3, #32
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	2310      	movs	r3, #16
 80050dc:	e7b0      	b.n	8005040 <_printf_i+0xfc>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2378      	movs	r3, #120	; 0x78
 80050e8:	4828      	ldr	r0, [pc, #160]	; (800518c <_printf_i+0x248>)
 80050ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ee:	e7e3      	b.n	80050b8 <_printf_i+0x174>
 80050f0:	0659      	lsls	r1, r3, #25
 80050f2:	bf48      	it	mi
 80050f4:	b2b6      	uxthmi	r6, r6
 80050f6:	e7e6      	b.n	80050c6 <_printf_i+0x182>
 80050f8:	4615      	mov	r5, r2
 80050fa:	e7bb      	b.n	8005074 <_printf_i+0x130>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	6826      	ldr	r6, [r4, #0]
 8005100:	6961      	ldr	r1, [r4, #20]
 8005102:	1d18      	adds	r0, r3, #4
 8005104:	6028      	str	r0, [r5, #0]
 8005106:	0635      	lsls	r5, r6, #24
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	d501      	bpl.n	8005110 <_printf_i+0x1cc>
 800510c:	6019      	str	r1, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0x1d2>
 8005110:	0670      	lsls	r0, r6, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0x1c8>
 8005114:	8019      	strh	r1, [r3, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	4615      	mov	r5, r2
 800511c:	e7ba      	b.n	8005094 <_printf_i+0x150>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	1d1a      	adds	r2, r3, #4
 8005122:	602a      	str	r2, [r5, #0]
 8005124:	681d      	ldr	r5, [r3, #0]
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	2100      	movs	r1, #0
 800512a:	4628      	mov	r0, r5
 800512c:	f7fb f870 	bl	8000210 <memchr>
 8005130:	b108      	cbz	r0, 8005136 <_printf_i+0x1f2>
 8005132:	1b40      	subs	r0, r0, r5
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005140:	e7a8      	b.n	8005094 <_printf_i+0x150>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	462a      	mov	r2, r5
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	47d0      	blx	sl
 800514c:	3001      	adds	r0, #1
 800514e:	d0ab      	beq.n	80050a8 <_printf_i+0x164>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d413      	bmi.n	800517e <_printf_i+0x23a>
 8005156:	68e0      	ldr	r0, [r4, #12]
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	bfb8      	it	lt
 800515e:	4618      	movlt	r0, r3
 8005160:	e7a4      	b.n	80050ac <_printf_i+0x168>
 8005162:	2301      	movs	r3, #1
 8005164:	4632      	mov	r2, r6
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d09b      	beq.n	80050a8 <_printf_i+0x164>
 8005170:	3501      	adds	r5, #1
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	9903      	ldr	r1, [sp, #12]
 8005176:	1a5b      	subs	r3, r3, r1
 8005178:	42ab      	cmp	r3, r5
 800517a:	dcf2      	bgt.n	8005162 <_printf_i+0x21e>
 800517c:	e7eb      	b.n	8005156 <_printf_i+0x212>
 800517e:	2500      	movs	r5, #0
 8005180:	f104 0619 	add.w	r6, r4, #25
 8005184:	e7f5      	b.n	8005172 <_printf_i+0x22e>
 8005186:	bf00      	nop
 8005188:	080054ad 	.word	0x080054ad
 800518c:	080054be 	.word	0x080054be

08005190 <memcpy>:
 8005190:	440a      	add	r2, r1
 8005192:	4291      	cmp	r1, r2
 8005194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005198:	d100      	bne.n	800519c <memcpy+0xc>
 800519a:	4770      	bx	lr
 800519c:	b510      	push	{r4, lr}
 800519e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a6:	4291      	cmp	r1, r2
 80051a8:	d1f9      	bne.n	800519e <memcpy+0xe>
 80051aa:	bd10      	pop	{r4, pc}

080051ac <memmove>:
 80051ac:	4288      	cmp	r0, r1
 80051ae:	b510      	push	{r4, lr}
 80051b0:	eb01 0402 	add.w	r4, r1, r2
 80051b4:	d902      	bls.n	80051bc <memmove+0x10>
 80051b6:	4284      	cmp	r4, r0
 80051b8:	4623      	mov	r3, r4
 80051ba:	d807      	bhi.n	80051cc <memmove+0x20>
 80051bc:	1e43      	subs	r3, r0, #1
 80051be:	42a1      	cmp	r1, r4
 80051c0:	d008      	beq.n	80051d4 <memmove+0x28>
 80051c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ca:	e7f8      	b.n	80051be <memmove+0x12>
 80051cc:	4402      	add	r2, r0
 80051ce:	4601      	mov	r1, r0
 80051d0:	428a      	cmp	r2, r1
 80051d2:	d100      	bne.n	80051d6 <memmove+0x2a>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051de:	e7f7      	b.n	80051d0 <memmove+0x24>

080051e0 <_free_r>:
 80051e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051e2:	2900      	cmp	r1, #0
 80051e4:	d044      	beq.n	8005270 <_free_r+0x90>
 80051e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ea:	9001      	str	r0, [sp, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f1a1 0404 	sub.w	r4, r1, #4
 80051f2:	bfb8      	it	lt
 80051f4:	18e4      	addlt	r4, r4, r3
 80051f6:	f000 f913 	bl	8005420 <__malloc_lock>
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <_free_r+0x94>)
 80051fc:	9801      	ldr	r0, [sp, #4]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	b933      	cbnz	r3, 8005210 <_free_r+0x30>
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	6014      	str	r4, [r2, #0]
 8005206:	b003      	add	sp, #12
 8005208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800520c:	f000 b90e 	b.w	800542c <__malloc_unlock>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d908      	bls.n	8005226 <_free_r+0x46>
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1961      	adds	r1, r4, r5
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1949      	addeq	r1, r1, r5
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	e7ed      	b.n	8005202 <_free_r+0x22>
 8005226:	461a      	mov	r2, r3
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b10b      	cbz	r3, 8005230 <_free_r+0x50>
 800522c:	42a3      	cmp	r3, r4
 800522e:	d9fa      	bls.n	8005226 <_free_r+0x46>
 8005230:	6811      	ldr	r1, [r2, #0]
 8005232:	1855      	adds	r5, r2, r1
 8005234:	42a5      	cmp	r5, r4
 8005236:	d10b      	bne.n	8005250 <_free_r+0x70>
 8005238:	6824      	ldr	r4, [r4, #0]
 800523a:	4421      	add	r1, r4
 800523c:	1854      	adds	r4, r2, r1
 800523e:	42a3      	cmp	r3, r4
 8005240:	6011      	str	r1, [r2, #0]
 8005242:	d1e0      	bne.n	8005206 <_free_r+0x26>
 8005244:	681c      	ldr	r4, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	6053      	str	r3, [r2, #4]
 800524a:	4421      	add	r1, r4
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	e7da      	b.n	8005206 <_free_r+0x26>
 8005250:	d902      	bls.n	8005258 <_free_r+0x78>
 8005252:	230c      	movs	r3, #12
 8005254:	6003      	str	r3, [r0, #0]
 8005256:	e7d6      	b.n	8005206 <_free_r+0x26>
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	1961      	adds	r1, r4, r5
 800525c:	428b      	cmp	r3, r1
 800525e:	bf04      	itt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	bf04      	itt	eq
 8005268:	1949      	addeq	r1, r1, r5
 800526a:	6021      	streq	r1, [r4, #0]
 800526c:	6054      	str	r4, [r2, #4]
 800526e:	e7ca      	b.n	8005206 <_free_r+0x26>
 8005270:	b003      	add	sp, #12
 8005272:	bd30      	pop	{r4, r5, pc}
 8005274:	20000294 	.word	0x20000294

08005278 <sbrk_aligned>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4e0e      	ldr	r6, [pc, #56]	; (80052b4 <sbrk_aligned+0x3c>)
 800527c:	460c      	mov	r4, r1
 800527e:	6831      	ldr	r1, [r6, #0]
 8005280:	4605      	mov	r5, r0
 8005282:	b911      	cbnz	r1, 800528a <sbrk_aligned+0x12>
 8005284:	f000 f8bc 	bl	8005400 <_sbrk_r>
 8005288:	6030      	str	r0, [r6, #0]
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f8b7 	bl	8005400 <_sbrk_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d00a      	beq.n	80052ac <sbrk_aligned+0x34>
 8005296:	1cc4      	adds	r4, r0, #3
 8005298:	f024 0403 	bic.w	r4, r4, #3
 800529c:	42a0      	cmp	r0, r4
 800529e:	d007      	beq.n	80052b0 <sbrk_aligned+0x38>
 80052a0:	1a21      	subs	r1, r4, r0
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 f8ac 	bl	8005400 <_sbrk_r>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d101      	bne.n	80052b0 <sbrk_aligned+0x38>
 80052ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052b0:	4620      	mov	r0, r4
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	20000298 	.word	0x20000298

080052b8 <_malloc_r>:
 80052b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	1ccd      	adds	r5, r1, #3
 80052be:	f025 0503 	bic.w	r5, r5, #3
 80052c2:	3508      	adds	r5, #8
 80052c4:	2d0c      	cmp	r5, #12
 80052c6:	bf38      	it	cc
 80052c8:	250c      	movcc	r5, #12
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	4607      	mov	r7, r0
 80052ce:	db01      	blt.n	80052d4 <_malloc_r+0x1c>
 80052d0:	42a9      	cmp	r1, r5
 80052d2:	d905      	bls.n	80052e0 <_malloc_r+0x28>
 80052d4:	230c      	movs	r3, #12
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	2600      	movs	r6, #0
 80052da:	4630      	mov	r0, r6
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	4e2e      	ldr	r6, [pc, #184]	; (800539c <_malloc_r+0xe4>)
 80052e2:	f000 f89d 	bl	8005420 <__malloc_lock>
 80052e6:	6833      	ldr	r3, [r6, #0]
 80052e8:	461c      	mov	r4, r3
 80052ea:	bb34      	cbnz	r4, 800533a <_malloc_r+0x82>
 80052ec:	4629      	mov	r1, r5
 80052ee:	4638      	mov	r0, r7
 80052f0:	f7ff ffc2 	bl	8005278 <sbrk_aligned>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	4604      	mov	r4, r0
 80052f8:	d14d      	bne.n	8005396 <_malloc_r+0xde>
 80052fa:	6834      	ldr	r4, [r6, #0]
 80052fc:	4626      	mov	r6, r4
 80052fe:	2e00      	cmp	r6, #0
 8005300:	d140      	bne.n	8005384 <_malloc_r+0xcc>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	4631      	mov	r1, r6
 8005306:	4638      	mov	r0, r7
 8005308:	eb04 0803 	add.w	r8, r4, r3
 800530c:	f000 f878 	bl	8005400 <_sbrk_r>
 8005310:	4580      	cmp	r8, r0
 8005312:	d13a      	bne.n	800538a <_malloc_r+0xd2>
 8005314:	6821      	ldr	r1, [r4, #0]
 8005316:	3503      	adds	r5, #3
 8005318:	1a6d      	subs	r5, r5, r1
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	4629      	mov	r1, r5
 8005328:	4638      	mov	r0, r7
 800532a:	f7ff ffa5 	bl	8005278 <sbrk_aligned>
 800532e:	3001      	adds	r0, #1
 8005330:	d02b      	beq.n	800538a <_malloc_r+0xd2>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	442b      	add	r3, r5
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	e00e      	b.n	8005358 <_malloc_r+0xa0>
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	1b52      	subs	r2, r2, r5
 800533e:	d41e      	bmi.n	800537e <_malloc_r+0xc6>
 8005340:	2a0b      	cmp	r2, #11
 8005342:	d916      	bls.n	8005372 <_malloc_r+0xba>
 8005344:	1961      	adds	r1, r4, r5
 8005346:	42a3      	cmp	r3, r4
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	bf18      	it	ne
 800534c:	6059      	strne	r1, [r3, #4]
 800534e:	6863      	ldr	r3, [r4, #4]
 8005350:	bf08      	it	eq
 8005352:	6031      	streq	r1, [r6, #0]
 8005354:	5162      	str	r2, [r4, r5]
 8005356:	604b      	str	r3, [r1, #4]
 8005358:	4638      	mov	r0, r7
 800535a:	f104 060b 	add.w	r6, r4, #11
 800535e:	f000 f865 	bl	800542c <__malloc_unlock>
 8005362:	f026 0607 	bic.w	r6, r6, #7
 8005366:	1d23      	adds	r3, r4, #4
 8005368:	1af2      	subs	r2, r6, r3
 800536a:	d0b6      	beq.n	80052da <_malloc_r+0x22>
 800536c:	1b9b      	subs	r3, r3, r6
 800536e:	50a3      	str	r3, [r4, r2]
 8005370:	e7b3      	b.n	80052da <_malloc_r+0x22>
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	42a3      	cmp	r3, r4
 8005376:	bf0c      	ite	eq
 8005378:	6032      	streq	r2, [r6, #0]
 800537a:	605a      	strne	r2, [r3, #4]
 800537c:	e7ec      	b.n	8005358 <_malloc_r+0xa0>
 800537e:	4623      	mov	r3, r4
 8005380:	6864      	ldr	r4, [r4, #4]
 8005382:	e7b2      	b.n	80052ea <_malloc_r+0x32>
 8005384:	4634      	mov	r4, r6
 8005386:	6876      	ldr	r6, [r6, #4]
 8005388:	e7b9      	b.n	80052fe <_malloc_r+0x46>
 800538a:	230c      	movs	r3, #12
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4638      	mov	r0, r7
 8005390:	f000 f84c 	bl	800542c <__malloc_unlock>
 8005394:	e7a1      	b.n	80052da <_malloc_r+0x22>
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	e7de      	b.n	8005358 <_malloc_r+0xa0>
 800539a:	bf00      	nop
 800539c:	20000294 	.word	0x20000294

080053a0 <_realloc_r>:
 80053a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	4680      	mov	r8, r0
 80053a6:	4614      	mov	r4, r2
 80053a8:	460e      	mov	r6, r1
 80053aa:	b921      	cbnz	r1, 80053b6 <_realloc_r+0x16>
 80053ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4611      	mov	r1, r2
 80053b2:	f7ff bf81 	b.w	80052b8 <_malloc_r>
 80053b6:	b92a      	cbnz	r2, 80053c4 <_realloc_r+0x24>
 80053b8:	f7ff ff12 	bl	80051e0 <_free_r>
 80053bc:	4625      	mov	r5, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c4:	f000 f838 	bl	8005438 <_malloc_usable_size_r>
 80053c8:	4284      	cmp	r4, r0
 80053ca:	4607      	mov	r7, r0
 80053cc:	d802      	bhi.n	80053d4 <_realloc_r+0x34>
 80053ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d2:	d812      	bhi.n	80053fa <_realloc_r+0x5a>
 80053d4:	4621      	mov	r1, r4
 80053d6:	4640      	mov	r0, r8
 80053d8:	f7ff ff6e 	bl	80052b8 <_malloc_r>
 80053dc:	4605      	mov	r5, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0ed      	beq.n	80053be <_realloc_r+0x1e>
 80053e2:	42bc      	cmp	r4, r7
 80053e4:	4622      	mov	r2, r4
 80053e6:	4631      	mov	r1, r6
 80053e8:	bf28      	it	cs
 80053ea:	463a      	movcs	r2, r7
 80053ec:	f7ff fed0 	bl	8005190 <memcpy>
 80053f0:	4631      	mov	r1, r6
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fef4 	bl	80051e0 <_free_r>
 80053f8:	e7e1      	b.n	80053be <_realloc_r+0x1e>
 80053fa:	4635      	mov	r5, r6
 80053fc:	e7df      	b.n	80053be <_realloc_r+0x1e>
	...

08005400 <_sbrk_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	; (800541c <_sbrk_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb feb0 	bl	8001170 <_sbrk>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_sbrk_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_sbrk_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	2000029c 	.word	0x2000029c

08005420 <__malloc_lock>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__malloc_lock+0x8>)
 8005422:	f000 b811 	b.w	8005448 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	200002a0 	.word	0x200002a0

0800542c <__malloc_unlock>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__malloc_unlock+0x8>)
 800542e:	f000 b80c 	b.w	800544a <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	200002a0 	.word	0x200002a0

08005438 <_malloc_usable_size_r>:
 8005438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800543c:	1f18      	subs	r0, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbc      	itt	lt
 8005442:	580b      	ldrlt	r3, [r1, r0]
 8005444:	18c0      	addlt	r0, r0, r3
 8005446:	4770      	bx	lr

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <_init>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr

08005458 <_fini>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr
