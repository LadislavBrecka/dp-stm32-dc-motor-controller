
demo-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf4  08004cf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000010  08004d0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004d0c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe5a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb5  00000000  00000000  0002fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00031e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00032c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002327f  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a7  00000000  00000000  00056be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd5e1  00000000  00000000  0006708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014466f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  001446c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004cb4 	.word	0x08004cb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004cb4 	.word	0x08004cb4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 ff4a 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f84c 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fac8 	bl	8000aa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000518:	f000 f8fa 	bl	8000710 <MX_TIM2_Init>
  MX_ADC1_Init();
 800051c:	f000 f8a6 	bl	800066c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fa96 	bl	8000a54 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000528:	f000 f9d6 	bl	80008d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052c:	f000 fa44 	bl	80009b8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // STARTING ALL PERIPHERALS
  HAL_TIM_Base_Start_IT(&htim2);	// timer for generating PWM signal
 8000530:	4817      	ldr	r0, [pc, #92]	; (8000590 <main+0x88>)
 8000532:	f002 fca7 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000536:	2104      	movs	r1, #4
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <main+0x88>)
 800053a:	f002 fd6d 	bl	8003018 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_IT(&hadc1);  		// ADC for scanning trimmer set value
 800053e:	4815      	ldr	r0, [pc, #84]	; (8000594 <main+0x8c>)
 8000540:	f000 ffe6 	bl	8001510 <HAL_ADC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim3);  	// timer for measuring HAL 1 frequency
 8000544:	4814      	ldr	r0, [pc, #80]	; (8000598 <main+0x90>)
 8000546:	f002 fc9d 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4812      	ldr	r0, [pc, #72]	; (8000598 <main+0x90>)
 800054e:	f002 fe85 	bl	800325c <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim4);   	// timer for measuring HAL 2 frequency
 8000552:	4812      	ldr	r0, [pc, #72]	; (800059c <main+0x94>)
 8000554:	f002 fc96 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000558:	2100      	movs	r1, #0
 800055a:	4810      	ldr	r0, [pc, #64]	; (800059c <main+0x94>)
 800055c:	f002 fe7e 	bl	800325c <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim5); 	// timer for send data over USART
 8000560:	480f      	ldr	r0, [pc, #60]	; (80005a0 <main+0x98>)
 8000562:	f002 fc8f 	bl	8002e84 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // SETTING INITIAL STATE
  TIM2->CCR2 = (htim2.Init.Period * final_stride) / 100u; // setting up initial PWM stride
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <main+0x88>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <main+0x9c>)
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000576:	490c      	ldr	r1, [pc, #48]	; (80005a8 <main+0xa0>)
 8000578:	fba1 1303 	umull	r1, r3, r1, r3
 800057c:	095b      	lsrs	r3, r3, #5
 800057e:	6393      	str	r3, [r2, #56]	; 0x38
  set_motor_direction(FORWARD_DIR);  // setting up initial motor direction
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fc8f 	bl	8000ea4 <set_motor_direction>

  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_IT(&hadc1);
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <main+0x8c>)
 8000588:	f000 ffc2 	bl	8001510 <HAL_ADC_Start_IT>
 800058c:	e7fb      	b.n	8000586 <main+0x7e>
 800058e:	bf00      	nop
 8000590:	20000074 	.word	0x20000074
 8000594:	2000002c 	.word	0x2000002c
 8000598:	200000bc 	.word	0x200000bc
 800059c:	20000104 	.word	0x20000104
 80005a0:	2000014c 	.word	0x2000014c
 80005a4:	20000000 	.word	0x20000000
 80005a8:	51eb851f 	.word	0x51eb851f

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 fb72 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xb8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <SystemClock_Config+0xb8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <SystemClock_Config+0xb8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <SystemClock_Config+0xbc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <SystemClock_Config+0xbc>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f941 	bl	80028a8 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800062c:	f000 fc60 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fe67 	bl	8002320 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000658:	f000 fc4a 	bl	8000ef0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC1_Init+0x98>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_ADC1_Init+0x9c>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0x98>)
 8000686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_ADC1_Init+0xa0>)
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ce:	f000 fedb 	bl	8001488 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 fc0a 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006dc:	2307      	movs	r3, #7
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ee:	f001 f91f 	bl	8001930 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 fbfa 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_TIM2_Init+0xe4>)
 800074a:	22a0      	movs	r2, #160	; 0xa0
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_TIM2_Init+0xe4>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000768:	f002 fb3c 	bl	8002de4 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000772:	f000 fbbd 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000780:	4619      	mov	r1, r3
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000784:	f003 f8f8 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800078e:	f000 fbaf 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_TIM2_Init+0xe4>)
 8000794:	f002 fbe6 	bl	8002f64 <HAL_TIM_PWM_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800079e:	f000 fba7 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_TIM2_Init+0xe4>)
 80007b2:	f003 fe01 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007bc:	f000 fb98 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c0:	2360      	movs	r3, #96	; 0x60
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80007c4:	2332      	movs	r3, #50	; 0x32
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2204      	movs	r2, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <MX_TIM2_Init+0xe4>)
 80007d8:	f003 f80c 	bl	80037f4 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007e2:	f000 fb85 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <MX_TIM2_Init+0xe4>)
 80007e8:	f000 fcc4 	bl	8001174 <HAL_TIM_MspPostInit>

}
 80007ec:	bf00      	nop
 80007ee:	3738      	adds	r7, #56	; 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000074 	.word	0x20000074

080007f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000824:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <MX_TIM3_Init+0xdc>)
 8000826:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_TIM3_Init+0xd8>)
 800082a:	22a0      	movs	r2, #160	; 0xa0
 800082c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_TIM3_Init+0xd8>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000848:	4821      	ldr	r0, [pc, #132]	; (80008d0 <MX_TIM3_Init+0xd8>)
 800084a:	f002 facb 	bl	8002de4 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 fb4c 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	4619      	mov	r1, r3
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000866:	f003 f887 	bl	8003978 <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 fb3e 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000876:	f002 fc97 	bl	80031a8 <HAL_TIM_IC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 fb36 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_TIM3_Init+0xd8>)
 8000894:	f003 fd90 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800089e:	f000 fb27 	bl	8000ef0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM3_Init+0xd8>)
 80008ba:	f002 feff 	bl	80036bc <HAL_TIM_IC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80008c4:	f000 fb14 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000904:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <MX_TIM4_Init+0xdc>)
 8000906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160;
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_TIM4_Init+0xd8>)
 800090a:	22a0      	movs	r2, #160	; 0xa0
 800090c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_TIM4_Init+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000928:	4821      	ldr	r0, [pc, #132]	; (80009b0 <MX_TIM4_Init+0xd8>)
 800092a:	f002 fa5b 	bl	8002de4 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 fadc 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000946:	f003 f817 	bl	8003978 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 face 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000956:	f002 fc27 	bl	80031a8 <HAL_TIM_IC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 fac6 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_TIM4_Init+0xd8>)
 8000974:	f003 fd20 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800097e:	f000 fab7 	bl	8000ef0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000986:	2301      	movs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_TIM4_Init+0xd8>)
 800099a:	f002 fe8f 	bl	80036bc <HAL_TIM_IC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80009a4:	f000 faa4 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000104 	.word	0x20000104
 80009b4:	40000800 	.word	0x40000800

080009b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_TIM5_Init+0x98>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 160;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009dc:	22a0      	movs	r2, #160	; 0xa0
 80009de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_TIM5_Init+0x94>)
 80009fc:	f002 f9f2 	bl	8002de4 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 fa73 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM5_Init+0x94>)
 8000a18:	f002 ffae 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f000 fa65 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM5_Init+0x94>)
 8000a34:	f003 fcc0 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f000 fa57 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000014c 	.word	0x2000014c
 8000a50:	40000c00 	.word	0x40000c00

08000a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART2_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f003 fd24 	bl	80044d8 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 fa2b 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000194 	.word	0x20000194
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_GPIO_Init+0x98>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIRECTION_1_Pin|MOTOR_DIRECTION_2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2130      	movs	r1, #48	; 0x30
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0x9c>)
 8000b18:	f001 fbe8 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_DIRECTION_1_Pin MOTOR_DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIRECTION_1_Pin|MOTOR_DIRECTION_2_Pin;
 8000b1c:	2330      	movs	r3, #48	; 0x30
 8000b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_GPIO_Init+0x9c>)
 8000b34:	f001 fa46 	bl	8001fc4 <HAL_GPIO_Init>

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	pot_value = HAL_ADC_GetValue(&hadc1);
 8000b50:	4824      	ldr	r0, [pc, #144]	; (8000be4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000b52:	f000 fecb 	bl	80018ec <HAL_ADC_GetValue>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b5c:	801a      	strh	r2, [r3, #0]
	stride_percentage = ( ( (PWM_MAX - PWM_MIN) * (pot_value - POT_MIN) ) / (POT_MAX - POT_MIN)) + PWM_MIN;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	23c8      	movs	r3, #200	; 0xc8
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_ADC_ConvCpltCallback+0xa4>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	12d2      	asrs	r2, r2, #11
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3b64      	subs	r3, #100	; 0x64
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000b80:	801a      	strh	r2, [r3, #0]
	if (stride_percentage > PWM_MAX) stride_percentage = PWM_MAX;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	2b64      	cmp	r3, #100	; 0x64
 8000b8a:	dd02      	ble.n	8000b92 <HAL_ADC_ConvCpltCallback+0x4a>
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	801a      	strh	r2, [r3, #0]
	if (stride_percentage < PWM_MIN) stride_percentage = PWM_MIN;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b98:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b9c:	da03      	bge.n	8000ba6 <HAL_ADC_ConvCpltCallback+0x5e>
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000ba0:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8000ba4:	801a      	strh	r2, [r3, #0]

	// now stride_percentage is between <-100, 100> because of both direction
	if (stride_percentage < 0)
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da0b      	bge.n	8000bc8 <HAL_ADC_ConvCpltCallback+0x80>
	{
		// going backward
		set_motor_direction(BACKWARD_DIR);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 f977 	bl	8000ea4 <set_motor_direction>
		final_stride = -stride_percentage;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000bc4:	701a      	strb	r2, [r3, #0]
	{
		// going forward
		set_motor_direction(FORWARD_DIR);
		final_stride = stride_percentage;
	}
}
 8000bc6:	e008      	b.n	8000bda <HAL_ADC_ConvCpltCallback+0x92>
		set_motor_direction(FORWARD_DIR);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 f96b 	bl	8000ea4 <set_motor_direction>
		final_stride = stride_percentage;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000bd8:	701a      	strb	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000002c 	.word	0x2000002c
 8000be8:	200001d8 	.word	0x200001d8
 8000bec:	7cf310d7 	.word	0x7cf310d7
 8000bf0:	200001da 	.word	0x200001da
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
	switch((uint32_t)htim->Instance)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d003      	beq.n	8000c12 <HAL_TIM_IC_CaptureCallback+0x1a>
 8000c0a:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d01c      	beq.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x52>
			actual_direction == FORWARD_DIR ? hal2_abs_pos++ : hal2_abs_pos--;
			compute_hal_freq(&hal2_freq, &hal2_ticks, &hal2_state, TIM4, &hal2_T1, &hal2_T2, &hal2_TIM4_OVC);
			break;

	}
}
 8000c10:	e037      	b.n	8000c82 <HAL_TIM_IC_CaptureCallback+0x8a>
			actual_direction == FORWARD_DIR ? hal1_abs_pos++ : hal1_abs_pos--;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d105      	bne.n	8000c26 <HAL_TIM_IC_CaptureCallback+0x2e>
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e004      	b.n	8000c30 <HAL_TIM_IC_CaptureCallback+0x38>
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c2e:	6013      	str	r3, [r2, #0]
			compute_hal_freq(&hal1_freq, &hal1_ticks, &hal1_state, TIM3, &hal1_T1, &hal1_T2, &hal1_TIM3_OVC);
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000c40:	491a      	ldr	r1, [pc, #104]	; (8000cac <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000c44:	f000 f890 	bl	8000d68 <compute_hal_freq>
			break;
 8000c48:	e01b      	b.n	8000c82 <HAL_TIM_IC_CaptureCallback+0x8a>
			actual_direction == FORWARD_DIR ? hal2_abs_pos++ : hal2_abs_pos--;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <HAL_TIM_IC_CaptureCallback+0x66>
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	e004      	b.n	8000c68 <HAL_TIM_IC_CaptureCallback+0x70>
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000c66:	6013      	str	r3, [r2, #0]
			compute_hal_freq(&hal2_freq, &hal2_ticks, &hal2_state, TIM4, &hal2_T1, &hal2_T2, &hal2_TIM4_OVC);
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c7c:	f000 f874 	bl	8000d68 <compute_hal_freq>
			break;
 8000c80:	bf00      	nop
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40000800 	.word	0x40000800
 8000c94:	200001dc 	.word	0x200001dc
 8000c98:	20000204 	.word	0x20000204
 8000c9c:	200001ea 	.word	0x200001ea
 8000ca0:	200001e4 	.word	0x200001e4
 8000ca4:	200001e0 	.word	0x200001e0
 8000ca8:	200001dd 	.word	0x200001dd
 8000cac:	200001e8 	.word	0x200001e8
 8000cb0:	200001ec 	.word	0x200001ec
 8000cb4:	20000208 	.word	0x20000208
 8000cb8:	200001fe 	.word	0x200001fe
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	200001f4 	.word	0x200001f4
 8000cc4:	200001f0 	.word	0x200001f0
 8000cc8:	200001fc 	.word	0x200001fc
 8000ccc:	20000200 	.word	0x20000200

08000cd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	switch((uint32_t)htim->Instance)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01c      	beq.n	8000d1c <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d82a      	bhi.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00f      	beq.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d824      	bhi.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d013      	beq.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x52>
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d11e      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
	case (uint32_t)TIM3: // TIM3 is measuring HAL 1 frequency
		hal1_TIM3_OVC++;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d0a:	801a      	strh	r2, [r3, #0]
		break;
 8000d0c:	e017      	b.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
	case (uint32_t)TIM4: // TIM4 is measuring HAL 2 frequency
		hal2_TIM4_OVC++;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d18:	801a      	strh	r2, [r3, #0]
		break;
 8000d1a:	e010      	b.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
	case (uint32_t)TIM5: // TIM5 is sending USART data
		send_data_usart();
 8000d1c:	f000 f88c 	bl	8000e38 <send_data_usart>
		break;
 8000d20:	e00d      	b.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x6e>
	case (uint32_t)TIM2:
		TIM2->CCR2 = (htim2.Init.Period * final_stride) / 100u;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	fb02 f303 	mul.w	r3, r2, r3
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	490c      	ldr	r1, [pc, #48]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d34:	fba1 1303 	umull	r1, r3, r1, r3
 8000d38:	095b      	lsrs	r3, r3, #5
 8000d3a:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000d3c:	bf00      	nop
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40000c00 	.word	0x40000c00
 8000d4c:	40000800 	.word	0x40000800
 8000d50:	40000400 	.word	0x40000400
 8000d54:	200001ea 	.word	0x200001ea
 8000d58:	200001fe 	.word	0x200001fe
 8000d5c:	20000074 	.word	0x20000074
 8000d60:	20000000 	.word	0x20000000
 8000d64:	51eb851f 	.word	0x51eb851f

08000d68 <compute_hal_freq>:

void compute_hal_freq(int32_t* hal_freq, uint16_t* hal_ticks, uint8_t* hal_state,
		TIM_TypeDef* tim, uint32_t* T1, uint32_t *T2, uint16_t* TIM_OVC)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
	if(*hal_state == IDLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10a      	bne.n	8000d94 <compute_hal_freq+0x2c>
	{
		*T1 = tim->CCR1;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	601a      	str	r2, [r3, #0]
		*TIM_OVC = 0;
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
		*hal_state = DONE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
		{
			*hal_freq = - (*hal_freq);
		}
		*hal_state = IDLE;
	}
}
 8000d92:	e025      	b.n	8000de0 <compute_hal_freq+0x78>
	else if(*hal_state == DONE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d121      	bne.n	8000de0 <compute_hal_freq+0x78>
		*T2 = tim->CCR1;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	601a      	str	r2, [r3, #0]
		compute_ticks(hal_ticks, *T1, *T2, *TIM_OVC);
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	68b8      	ldr	r0, [r7, #8]
 8000db2:	f000 f81d 	bl	8000df0 <compute_ticks>
		*hal_freq = (uint32_t)(F_CLK/ (*hal_ticks));
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <compute_hal_freq+0x80>)
 8000dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	601a      	str	r2, [r3, #0]
		if (actual_direction == BACKWARD_DIR)
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <compute_hal_freq+0x84>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d104      	bne.n	8000dda <compute_hal_freq+0x72>
			*hal_freq = - (*hal_freq);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	425a      	negs	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]
		*hal_state = IDLE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	000186a0 	.word	0x000186a0
 8000dec:	200001dc 	.word	0x200001dc

08000df0 <compute_ticks>:

void compute_ticks(uint16_t* hal_ticks, uint32_t T1, uint32_t T2, uint16_t TIM_OVC)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	807b      	strh	r3, [r7, #2]
	*hal_ticks = (T2 + (TIM_OVC * 65536)) - T1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	801a      	strh	r2, [r3, #0]
	// sometimes, TIM_OVC isn't incremented when it should be,
	// so this check is repairing the problem
	if (*hal_ticks > 10000) {
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d907      	bls.n	8000e2a <compute_ticks+0x3a>
		*hal_ticks = (T2 + ((*hal_ticks)  * 65536)) - T1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	801a      	strh	r2, [r3, #0]
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <send_data_usart>:
	value += temp & 1;               // add one if value was negative
	return value;
}

void send_data_usart()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
	USART_Data data = { stride_percentage, hal1_freq, hal1_abs_pos };
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <send_data_usart+0x54>)
 8000e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <send_data_usart+0x58>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <send_data_usart+0x5c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	617b      	str	r3, [r7, #20]
	char buffer[sizeof(data)];
	memcpy(buffer, &data, sizeof(data));
 8000e52:	463b      	mov	r3, r7
 8000e54:	f107 020c 	add.w	r2, r7, #12
 8000e58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*)"S", sizeof("S"), 100);
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2202      	movs	r2, #2
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <send_data_usart+0x60>)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <send_data_usart+0x64>)
 8000e66:	f003 fb84 	bl	8004572 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(data), 100);
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	220c      	movs	r2, #12
 8000e70:	480a      	ldr	r0, [pc, #40]	; (8000e9c <send_data_usart+0x64>)
 8000e72:	f003 fb7e 	bl	8004572 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Z", sizeof("Z"), 100);
 8000e76:	2364      	movs	r3, #100	; 0x64
 8000e78:	2202      	movs	r2, #2
 8000e7a:	4909      	ldr	r1, [pc, #36]	; (8000ea0 <send_data_usart+0x68>)
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <send_data_usart+0x64>)
 8000e7e:	f003 fb78 	bl	8004572 <HAL_UART_Transmit>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001da 	.word	0x200001da
 8000e90:	200001ec 	.word	0x200001ec
 8000e94:	20000204 	.word	0x20000204
 8000e98:	08004ccc 	.word	0x08004ccc
 8000e9c:	20000194 	.word	0x20000194
 8000ea0:	08004cd0 	.word	0x08004cd0

08000ea4 <set_motor_direction>:

void set_motor_direction(uint8_t dir)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	actual_direction = dir;
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <set_motor_direction+0x44>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_DIRECTION_1_GPIO_Port, MOTOR_DIRECTION_1_Pin, dir == FORWARD_DIR ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf0c      	ite	eq
 8000eba:	2301      	moveq	r3, #1
 8000ebc:	2300      	movne	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <set_motor_direction+0x48>)
 8000ec6:	f001 fa11 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_DIRECTION_2_GPIO_Port, MOTOR_DIRECTION_2_Pin, dir == BACKWARD_DIR ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2120      	movs	r1, #32
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <set_motor_direction+0x48>)
 8000edc:	f001 fa06 	bl	80022ec <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001dc 	.word	0x200001dc
 8000eec:	40020400 	.word	0x40020400

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x8c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12f      	bne.n	8000fce <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0x90>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_1_PWM_TRIMER_Pin;
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_PWM_TRIMER_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <HAL_ADC_MspInit+0x94>)
 8000fba:	f001 f803 	bl	8001fc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2012      	movs	r0, #18
 8000fc4:	f000 ffc7 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fc8:	2012      	movs	r0, #18
 8000fca:	f000 ffe0 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001004:	d116      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	4b54      	ldr	r3, [pc, #336]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a53      	ldr	r2, [pc, #332]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201c      	movs	r0, #28
 8001028:	f000 ff95 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800102c:	201c      	movs	r0, #28
 800102e:	f000 ffae 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001032:	e08e      	b.n	8001152 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_TIM_Base_MspInit+0x17c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d134      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a45      	ldr	r2, [pc, #276]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b43      	ldr	r3, [pc, #268]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a3e      	ldr	r2, [pc, #248]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001086:	2302      	movs	r3, #2
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <HAL_TIM_Base_MspInit+0x180>)
 8001092:	f000 ff97 	bl	8001fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	201d      	movs	r0, #29
 800109c:	f000 ff5b 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010a0:	201d      	movs	r0, #29
 80010a2:	f000 ff74 	bl	8001f8e <HAL_NVIC_EnableIRQ>
}
 80010a6:	e054      	b.n	8001152 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM4)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <HAL_TIM_Base_MspInit+0x184>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d134      	bne.n	800111c <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010fa:	2302      	movs	r3, #2
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4819      	ldr	r0, [pc, #100]	; (800116c <HAL_TIM_Base_MspInit+0x188>)
 8001106:	f000 ff5d 	bl	8001fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201e      	movs	r0, #30
 8001110:	f000 ff21 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001114:	201e      	movs	r0, #30
 8001116:	f000 ff3a 	bl	8001f8e <HAL_NVIC_EnableIRQ>
}
 800111a:	e01a      	b.n	8001152 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM5)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_TIM_Base_MspInit+0x18c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d115      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_TIM_Base_MspInit+0x178>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2032      	movs	r0, #50	; 0x32
 8001148:	f000 ff05 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800114c:	2032      	movs	r0, #50	; 0x32
 800114e:	f000 ff1e 	bl	8001f8e <HAL_NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40000400 	.word	0x40000400
 8001164:	40020000 	.word	0x40020000
 8001168:	40000800 	.word	0x40000800
 800116c:	40020400 	.word	0x40020400
 8001170:	40000c00 	.word	0x40000c00

08001174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001194:	d11d      	bne.n	80011d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIMER_2_MOTOR_PWM_Pin;
 80011b2:	2308      	movs	r3, #8
 80011b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER_2_MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 80011ce:	f000 fef9 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_UART_MspInit+0x84>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12b      	bne.n	800125e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_UART_MspInit+0x88>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_UART_MspInit+0x88>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_UART_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123e:	230c      	movs	r3, #12
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124e:	2307      	movs	r3, #7
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_UART_MspInit+0x8c>)
 800125a:	f000 feb3 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f8c2 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <ADC_IRQHandler+0x10>)
 80012ce:	f000 f9fd 	bl	80016cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000002c 	.word	0x2000002c

080012dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM2_IRQHandler+0x10>)
 80012e2:	f002 f8e3 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000074 	.word	0x20000074

080012f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM3_IRQHandler+0x10>)
 80012f6:	f002 f8d9 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000bc 	.word	0x200000bc

08001304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM4_IRQHandler+0x10>)
 800130a:	f002 f8cf 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000104 	.word	0x20000104

08001318 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM5_IRQHandler+0x10>)
 800131e:	f002 f8c5 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000014c 	.word	0x2000014c

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd7 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f003 fc6d 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f8c1 	bl	8000508 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001394:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 8001398:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800139c:	20000210 	.word	0x20000210

080013a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <CAN1_RX0_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fdb7 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd90 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fdcf 	bl	8001faa <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 fd97 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000004 	.word	0x20000004
 8001440:	2000000c 	.word	0x2000000c
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	2000020c 	.word	0x2000020c

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000020c 	.word	0x2000020c

08001488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e033      	b.n	8001506 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fd50 	bl	8000f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ce:	f023 0302 	bic.w	r3, r3, #2
 80014d2:	f043 0202 	orr.w	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fb5a 	bl	8001b94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f023 0303 	bic.w	r3, r3, #3
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
 80014f6:	e001      	b.n	80014fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_ADC_Start_IT+0x1a>
 8001526:	2302      	movs	r3, #2
 8001528:	e0bd      	b.n	80016a6 <HAL_ADC_Start_IT+0x196>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d018      	beq.n	8001572 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_ADC_Start_IT+0x1a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_ADC_Start_IT+0x1a8>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0c9a      	lsrs	r2, r3, #18
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001564:	e002      	b.n	800156c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8085 	bne.w	800168c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f023 0206 	bic.w	r2, r3, #6
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
 80015ce:	e002      	b.n	80015d6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_ADC_Start_IT+0x1ac>)
 80015e0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12a      	bne.n	8001662 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_ADC_Start_IT+0x1b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d015      	beq.n	8001642 <HAL_ADC_Start_IT+0x132>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_ADC_Start_IT+0x1b4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d105      	bne.n	800162c <HAL_ADC_Start_IT+0x11c>
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_ADC_Start_IT+0x1ac>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_ADC_Start_IT+0x1b8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d136      	bne.n	80016a4 <HAL_ADC_Start_IT+0x194>
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_ADC_Start_IT+0x1ac>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d130      	bne.n	80016a4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d129      	bne.n	80016a4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e020      	b.n	80016a4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <HAL_ADC_Start_IT+0x1b0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d11b      	bne.n	80016a4 <HAL_ADC_Start_IT+0x194>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d114      	bne.n	80016a4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e00b      	b.n	80016a4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0210 	orr.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000004 	.word	0x20000004
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	40012300 	.word	0x40012300
 80016c0:	40012000 	.word	0x40012000
 80016c4:	40012100 	.word	0x40012100
 80016c8:	40012200 	.word	0x40012200

080016cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d049      	beq.n	8001796 <HAL_ADC_IRQHandler+0xca>
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d046      	beq.n	8001796 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d12b      	bne.n	8001786 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	d127      	bne.n	8001786 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0220 	bic.w	r2, r2, #32
 8001760:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff f9de 	bl	8000b48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0212 	mvn.w	r2, #18
 8001794:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d057      	beq.n	800185c <HAL_ADC_IRQHandler+0x190>
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d054      	beq.n	800185c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d139      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12b      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d124      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11d      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d119      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001826:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fa9d 	bl	8001d8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 020c 	mvn.w	r2, #12
 800185a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d017      	beq.n	80018a2 <HAL_ADC_IRQHandler+0x1d6>
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d014      	beq.n	80018a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10d      	bne.n	80018a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f837 	bl	8001906 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0201 	mvn.w	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d015      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x218>
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d012      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f06f 0220 	mvn.w	r2, #32
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f820 	bl	800191a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f06f 0220 	mvn.w	r2, #32
 80018e2:	601a      	str	r2, [r3, #0]
  }
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1c>
 8001948:	2302      	movs	r3, #2
 800194a:	e113      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x244>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d925      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43da      	mvns	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	400a      	ands	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	4603      	mov	r3, r0
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4403      	add	r3, r0
 800199a:	3b1e      	subs	r3, #30
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e022      	b.n	80019ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	2207      	movs	r2, #7
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	400a      	ands	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4403      	add	r3, r0
 80019e4:	409a      	lsls	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d824      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b05      	subs	r3, #5
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b05      	subs	r3, #5
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e04c      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d824      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b23      	subs	r3, #35	; 0x23
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43da      	mvns	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	400a      	ands	r2, r1
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b23      	subs	r3, #35	; 0x23
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a90:	e023      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b41      	subs	r3, #65	; 0x41
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	; 0x41
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_ADC_ConfigChannel+0x250>)
 8001adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_ADC_ConfigChannel+0x254>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10f      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d10b      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_ADC_ConfigChannel+0x254>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x23a>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_ADC_ConfigChannel+0x258>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d003      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x1f4>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b11      	cmp	r3, #17
 8001b22:	d122      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_ADC_ConfigChannel+0x258>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d111      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_ADC_ConfigChannel+0x25c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_ADC_ConfigChannel+0x260>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9a      	lsrs	r2, r3, #18
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b5c:	e002      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f9      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40012300 	.word	0x40012300
 8001b84:	40012000 	.word	0x40012000
 8001b88:	10000012 	.word	0x10000012
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	431bde83 	.word	0x431bde83

08001b94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9c:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <ADC_Init+0x1f0>)
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	021a      	lsls	r2, r3, #8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <ADC_Init+0x1f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	e00f      	b.n	8001c92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0202 	bic.w	r2, r2, #2
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	005a      	lsls	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	3b01      	subs	r3, #1
 8001cec:	035a      	lsls	r2, r3, #13
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	e007      	b.n	8001d08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	051a      	lsls	r2, r3, #20
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d4a:	025a      	lsls	r2, r3, #9
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6899      	ldr	r1, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	029a      	lsls	r2, r3, #10
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40012300 	.word	0x40012300
 8001d88:	0f000001 	.word	0x0f000001

08001d8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff3e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff31 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e165      	b.n	80022ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8154 	bne.w	80022a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002012:	2b02      	cmp	r3, #2
 8002014:	d130      	bne.n	8002078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80ae 	beq.w	80022a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_GPIO_Init+0x300>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_GPIO_Init+0x300>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <HAL_GPIO_Init+0x300>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002166:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_GPIO_Init+0x304>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	; (80022cc <HAL_GPIO_Init+0x308>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x21a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <HAL_GPIO_Init+0x30c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x216>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x310>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x212>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_GPIO_Init+0x314>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x20e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_GPIO_Init+0x318>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x20a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <HAL_GPIO_Init+0x31c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x206>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_GPIO_Init+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x202>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x21c>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x304>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_GPIO_Init+0x324>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <HAL_GPIO_Init+0x324>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_GPIO_Init+0x324>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_GPIO_Init+0x324>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae96 	bls.w	8001fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0cc      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d90c      	bls.n	800235c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800237e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a52      	ldr	r2, [pc, #328]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d044      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e067      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4934      	ldr	r1, [pc, #208]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7ff f82e 	bl	8001470 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff f82a 	bl	8001470 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e04f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d20c      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f855 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe ff8e 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08004cd4 	.word	0x08004cd4
 80024e4:	20000004 	.word	0x20000004
 80024e8:	20000008 	.word	0x20000008

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0a9b      	lsrs	r3, r3, #10
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08004ce4 	.word	0x08004ce4

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002530:	f7ff ffdc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0b5b      	lsrs	r3, r3, #13
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08004ce4 	.word	0x08004ce4

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b0a6      	sub	sp, #152	; 0x98
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257a:	4bc8      	ldr	r3, [pc, #800]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b0c      	cmp	r3, #12
 8002584:	f200 817e 	bhi.w	8002884 <HAL_RCC_GetSysClockFreq+0x330>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_RCC_GetSysClockFreq+0x3c>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025c5 	.word	0x080025c5
 8002594:	08002885 	.word	0x08002885
 8002598:	08002885 	.word	0x08002885
 800259c:	08002885 	.word	0x08002885
 80025a0:	080025cd 	.word	0x080025cd
 80025a4:	08002885 	.word	0x08002885
 80025a8:	08002885 	.word	0x08002885
 80025ac:	08002885 	.word	0x08002885
 80025b0:	080025d5 	.word	0x080025d5
 80025b4:	08002885 	.word	0x08002885
 80025b8:	08002885 	.word	0x08002885
 80025bc:	08002885 	.word	0x08002885
 80025c0:	0800273f 	.word	0x0800273f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4bb6      	ldr	r3, [pc, #728]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80025ca:	e15f      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025cc:	4bb5      	ldr	r3, [pc, #724]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80025ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80025d2:	e15b      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d4:	4bb1      	ldr	r3, [pc, #708]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e0:	4bae      	ldr	r3, [pc, #696]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d031      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4bab      	ldr	r3, [pc, #684]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002600:	2300      	movs	r3, #0
 8002602:	667b      	str	r3, [r7, #100]	; 0x64
 8002604:	4ba7      	ldr	r3, [pc, #668]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002606:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800260a:	462a      	mov	r2, r5
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	2300      	movs	r3, #0
 8002612:	4621      	mov	r1, r4
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	4aa2      	ldr	r2, [pc, #648]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800261c:	4621      	mov	r1, r4
 800261e:	fba1 1202 	umull	r1, r2, r1, r2
 8002622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002624:	460a      	mov	r2, r1
 8002626:	67ba      	str	r2, [r7, #120]	; 0x78
 8002628:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800262a:	4413      	add	r3, r2
 800262c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002632:	2200      	movs	r2, #0
 8002634:	65bb      	str	r3, [r7, #88]	; 0x58
 8002636:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002638:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800263c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002640:	f7fd fde0 	bl	8000204 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800264e:	e064      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002650:	4b92      	ldr	r3, [pc, #584]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	2200      	movs	r2, #0
 8002658:	653b      	str	r3, [r7, #80]	; 0x50
 800265a:	657a      	str	r2, [r7, #84]	; 0x54
 800265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
 8002664:	2300      	movs	r3, #0
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800266c:	4622      	mov	r2, r4
 800266e:	462b      	mov	r3, r5
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	0159      	lsls	r1, r3, #5
 800267a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267e:	0150      	lsls	r0, r2, #5
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4621      	mov	r1, r4
 8002686:	1a51      	subs	r1, r2, r1
 8002688:	6139      	str	r1, [r7, #16]
 800268a:	4629      	mov	r1, r5
 800268c:	eb63 0301 	sbc.w	r3, r3, r1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269e:	4659      	mov	r1, fp
 80026a0:	018b      	lsls	r3, r1, #6
 80026a2:	4651      	mov	r1, sl
 80026a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a8:	4651      	mov	r1, sl
 80026aa:	018a      	lsls	r2, r1, #6
 80026ac:	4651      	mov	r1, sl
 80026ae:	ebb2 0801 	subs.w	r8, r2, r1
 80026b2:	4659      	mov	r1, fp
 80026b4:	eb63 0901 	sbc.w	r9, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026cc:	4690      	mov	r8, r2
 80026ce:	4699      	mov	r9, r3
 80026d0:	4623      	mov	r3, r4
 80026d2:	eb18 0303 	adds.w	r3, r8, r3
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	462b      	mov	r3, r5
 80026da:	eb49 0303 	adc.w	r3, r9, r3
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ec:	4629      	mov	r1, r5
 80026ee:	028b      	lsls	r3, r1, #10
 80026f0:	4621      	mov	r1, r4
 80026f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f6:	4621      	mov	r1, r4
 80026f8:	028a      	lsls	r2, r1, #10
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002702:	2200      	movs	r2, #0
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
 8002706:	647a      	str	r2, [r7, #68]	; 0x44
 8002708:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800270c:	f7fd fd7a 	bl	8000204 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4613      	mov	r3, r2
 8002716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	3301      	adds	r3, #1
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800272c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800273c:	e0a6      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273e:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d02a      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	2200      	movs	r2, #0
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002768:	2100      	movs	r1, #0
 800276a:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800276c:	fb03 f201 	mul.w	r2, r3, r1
 8002770:	2300      	movs	r3, #0
 8002772:	fb00 f303 	mul.w	r3, r0, r3
 8002776:	4413      	add	r3, r2
 8002778:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800277a:	fba0 1202 	umull	r1, r2, r0, r2
 800277e:	677a      	str	r2, [r7, #116]	; 0x74
 8002780:	460a      	mov	r2, r1
 8002782:	673a      	str	r2, [r7, #112]	; 0x70
 8002784:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002786:	4413      	add	r3, r2
 8002788:	677b      	str	r3, [r7, #116]	; 0x74
 800278a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800278e:	2200      	movs	r2, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	637a      	str	r2, [r7, #52]	; 0x34
 8002794:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002798:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800279c:	f7fd fd32 	bl	8000204 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027aa:	e05b      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4641      	mov	r1, r8
 80027e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002800:	ebb2 040a 	subs.w	r4, r2, sl
 8002804:	eb63 050b 	sbc.w	r5, r3, fp
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	00eb      	lsls	r3, r5, #3
 8002812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002816:	00e2      	lsls	r2, r4, #3
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4643      	mov	r3, r8
 800281e:	18e3      	adds	r3, r4, r3
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	464b      	mov	r3, r9
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002836:	4629      	mov	r1, r5
 8002838:	028b      	lsls	r3, r1, #10
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002840:	4621      	mov	r1, r4
 8002842:	028a      	lsls	r2, r1, #10
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284c:	2200      	movs	r2, #0
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	61fa      	str	r2, [r7, #28]
 8002852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002856:	f7fd fcd5 	bl	8000204 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4613      	mov	r3, r2
 8002860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_GetSysClockFreq+0x348>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0f1b      	lsrs	r3, r3, #28
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002882:	e003      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800288a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002890:	4618      	mov	r0, r3
 8002892:	3798      	adds	r7, #152	; 0x98
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	017d7840 	.word	0x017d7840

080028a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e28d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8083 	beq.w	80029ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028c8:	4b94      	ldr	r3, [pc, #592]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028d4:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028e0:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d112      	bne.n	8002920 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002906:	d10b      	bne.n	8002920 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d05b      	beq.n	80029cc <HAL_RCC_OscConfig+0x124>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d157      	bne.n	80029cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e25a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d106      	bne.n	8002938 <HAL_RCC_OscConfig+0x90>
 800292a:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7b      	ldr	r2, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xcc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xb4>
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a72      	ldr	r2, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xcc>
 800295c:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b6c      	ldr	r3, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6b      	ldr	r2, [pc, #428]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fd78 	bl	8001470 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fd74 	bl	8001470 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e21f      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xdc>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fd64 	bl	8001470 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fd60 	bl	8001470 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e20b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x104>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06f      	beq.n	8002aba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029da:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d017      	beq.n	8002a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d105      	bne.n	80029fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x186>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1d3      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x278>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fd0d 	bl	8001470 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fd09 	bl	8001470 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1b4      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x278>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fcec 	bl	8001470 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fce8 	bl	8001470 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e193      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fccc 	bl	8001470 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fcc8 	bl	8001470 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e173      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x234>
 8002afa:	e01b      	b.n	8002b34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x27c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fcb5 	bl	8001470 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fcb1 	bl	8001470 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e15c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b8a      	ldr	r3, [pc, #552]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8097 	beq.w	8002c70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fc71 	bl	8001470 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7fe fc6d 	bl	8001470 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e118      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x4b0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x31e>
 8002bb8:	4b66      	ldr	r3, [pc, #408]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x358>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x340>
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a60      	ldr	r2, [pc, #384]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a5d      	ldr	r2, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x358>
 8002be8:	4b5a      	ldr	r3, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a59      	ldr	r2, [pc, #356]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fc32 	bl	8001470 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fc2e 	bl	8001470 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0d7      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x368>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fc1c 	bl	8001470 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fc18 	bl	8001470 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0c1      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ad 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d060      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d145      	bne.n	8002d1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fbec 	bl	8001470 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fbe8 	bl	8001470 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e093      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	071b      	lsls	r3, r3, #28
 8002ce6:	491b      	ldr	r1, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fbbd 	bl	8001470 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fbb9 	bl	8001470 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e064      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x452>
 8002d18:	e05c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x4b4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fba6 	bl	8001470 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fba2 	bl	8001470 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x480>
 8002d46:	e045      	b.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e040      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x538>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d030      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d129      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d122      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d119      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10f      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe f8ea 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fe8e 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04e      	b.n	8002f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d01d      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d010      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	e007      	b.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40001800 	.word	0x40001800

08002f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e041      	b.n	8002ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f839 	bl	8003002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fdce 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start+0x24>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e022      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d109      	bne.n	8003056 <HAL_TIM_PWM_Start+0x3e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e015      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d109      	bne.n	8003070 <HAL_TIM_PWM_Start+0x58>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e07c      	b.n	8003184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0x82>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	e013      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0x92>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	e00b      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d104      	bne.n	80030ba <HAL_TIM_PWM_Start+0xa2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	e003      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f94e 	bl	800436c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_TIM_PWM_Start+0x174>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_PWM_Start+0xcc>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <HAL_TIM_PWM_Start+0x178>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_PWM_Start+0xd0>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_TIM_PWM_Start+0xd2>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <HAL_TIM_PWM_Start+0x174>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d01d      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_TIM_PWM_Start+0x17c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_TIM_PWM_Start+0x180>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_TIM_PWM_Start+0x184>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_TIM_PWM_Start+0x178>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_TIM_PWM_Start+0x188>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_TIM_PWM_Start+0x18c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40010000 	.word	0x40010000
 8003190:	40010400 	.word	0x40010400
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f839 	bl	8003246 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fcac 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0x1e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e013      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0x2e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e00b      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0x3e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e003      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x46>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_IC_Start_IT+0x58>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e013      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d104      	bne.n	80032c4 <HAL_TIM_IC_Start_IT+0x68>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e00b      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_IC_Start_IT+0x78>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e003      	b.n	80032dc <HAL_TIM_IC_Start_IT+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e4:	7b7b      	ldrb	r3, [r7, #13]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0cc      	b.n	8003488 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	e013      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0xb2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800330c:	e00b      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_IT+0xc2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	e003      	b.n	8003326 <HAL_TIM_IC_Start_IT+0xca>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0xda>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	e013      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start_IT+0xea>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003344:	e00b      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0xfa>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	e003      	b.n	800335e <HAL_TIM_IC_Start_IT+0x102>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d841      	bhi.n	80033e8 <HAL_TIM_IC_Start_IT+0x18c>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <HAL_TIM_IC_Start_IT+0x110>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080033e9 	.word	0x080033e9
 8003374:	080033e9 	.word	0x080033e9
 8003378:	080033e9 	.word	0x080033e9
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033e9 	.word	0x080033e9
 8003384:	080033e9 	.word	0x080033e9
 8003388:	080033e9 	.word	0x080033e9
 800338c:	080033c5 	.word	0x080033c5
 8003390:	080033e9 	.word	0x080033e9
 8003394:	080033e9 	.word	0x080033e9
 8003398:	080033e9 	.word	0x080033e9
 800339c:	080033d7 	.word	0x080033d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0202 	orr.w	r2, r2, #2
 80033ae:	60da      	str	r2, [r3, #12]
      break;
 80033b0:	e01d      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0204 	orr.w	r2, r2, #4
 80033c0:	60da      	str	r2, [r3, #12]
      break;
 80033c2:	e014      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	60da      	str	r2, [r3, #12]
      break;
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0210 	orr.w	r2, r2, #16
 80033e4:	60da      	str	r2, [r3, #12]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d148      	bne.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 ffb5 	bl	800436c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <HAL_TIM_IC_Start_IT+0x234>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d01d      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIM_IC_Start_IT+0x238>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_TIM_IC_Start_IT+0x23c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_TIM_IC_Start_IT+0x240>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_TIM_IC_Start_IT+0x244>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_TIM_IC_Start_IT+0x248>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_IC_Start_IT+0x1f6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40001800 	.word	0x40001800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fb82 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fb05 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb0c 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fb58 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fadb 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fae2 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0208 	mvn.w	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb2e 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fab1 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fab8 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0210 	mvn.w	r2, #16
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fb04 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa87 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa8e 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0201 	mvn.w	r2, #1
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fb50 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 ff34 	bl	80044c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa53 	bl	8003b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0220 	mvn.w	r2, #32
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fefe 	bl	80044b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_TIM_IC_ConfigChannel+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e088      	b.n	80037ec <HAL_TIM_IC_ConfigChannel+0x130>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f000 fc74 	bl	8003fe4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 020c 	bic.w	r2, r2, #12
 800370a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
 800371e:	e060      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d11c      	bne.n	8003760 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f000 fcf8 	bl	800412a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6999      	ldr	r1, [r3, #24]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
 800375e:	e040      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11b      	bne.n	800379e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f000 fd45 	bl	8004204 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 020c 	bic.w	r2, r2, #12
 8003788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
 800379c:	e021      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0c      	cmp	r3, #12
 80037a2:	d11c      	bne.n	80037de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 fd62 	bl	800427c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69d9      	ldr	r1, [r3, #28]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	021a      	lsls	r2, r3, #8
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	e001      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800380e:	2302      	movs	r3, #2
 8003810:	e0ae      	b.n	8003970 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0c      	cmp	r3, #12
 800381e:	f200 809f 	bhi.w	8003960 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800385d 	.word	0x0800385d
 800382c:	08003961 	.word	0x08003961
 8003830:	08003961 	.word	0x08003961
 8003834:	08003961 	.word	0x08003961
 8003838:	0800389d 	.word	0x0800389d
 800383c:	08003961 	.word	0x08003961
 8003840:	08003961 	.word	0x08003961
 8003844:	08003961 	.word	0x08003961
 8003848:	080038df 	.word	0x080038df
 800384c:	08003961 	.word	0x08003961
 8003850:	08003961 	.word	0x08003961
 8003854:	08003961 	.word	0x08003961
 8003858:	0800391f 	.word	0x0800391f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fa0e 	bl	8003c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]
      break;
 800389a:	e064      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fa5e 	bl	8003d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	619a      	str	r2, [r3, #24]
      break;
 80038dc:	e043      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fab3 	bl	8003e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0208 	orr.w	r2, r2, #8
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0204 	bic.w	r2, r2, #4
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
      break;
 800391c:	e023      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fb07 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	021a      	lsls	r2, r3, #8
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]
      break;
 800395e:	e002      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800396e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_ConfigClockSource+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b4      	b.n	8003afe <HAL_TIM_ConfigClockSource+0x186>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039cc:	d03e      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0xd4>
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d2:	f200 8087 	bhi.w	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	f000 8086 	beq.w	8003aea <HAL_TIM_ConfigClockSource+0x172>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d87f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b70      	cmp	r3, #112	; 0x70
 80039e6:	d01a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xa6>
 80039e8:	2b70      	cmp	r3, #112	; 0x70
 80039ea:	d87b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b60      	cmp	r3, #96	; 0x60
 80039ee:	d050      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x11a>
 80039f0:	2b60      	cmp	r3, #96	; 0x60
 80039f2:	d877      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b50      	cmp	r3, #80	; 0x50
 80039f6:	d03c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xfa>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d873      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d058      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d86f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d064      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	2b30      	cmp	r3, #48	; 0x30
 8003a0a:	d86b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d060      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d867      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d05a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a1c:	e062      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f000 fc7d 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]
      break;
 8003a4a:	e04f      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f000 fc66 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6e:	609a      	str	r2, [r3, #8]
      break;
 8003a70:	e03c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fb24 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2150      	movs	r1, #80	; 0x50
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fc33 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e02c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 fb80 	bl	80041a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2160      	movs	r1, #96	; 0x60
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fc23 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e01c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 fb04 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fc13 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 fc0a 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003ae2:	e003      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e000      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x64>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC1_SetConfig+0x8e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0320 	bic.w	r3, r3, #32
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC2_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10d      	bne.n	8003de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_OC2_SetConfig+0x94>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d113      	bne.n	8003e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC3_SetConfig+0x66>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10d      	bne.n	8003ed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC3_SetConfig+0x92>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <TIM_OC4_SetConfig+0xa4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC4_SetConfig+0x68>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <TIM_OC4_SetConfig+0xa8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d109      	bne.n	8003fb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_TI1_SetConfig+0xcc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01b      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d017      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <TIM_TI1_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <TIM_TI1_SetConfig+0xd4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00f      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a23      	ldr	r2, [pc, #140]	; (80040bc <TIM_TI1_SetConfig+0xd8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <TIM_TI1_SetConfig+0xdc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <TIM_TI1_SetConfig+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <TIM_TI1_SetConfig+0xe4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <TIM_TI1_SetConfig+0x6a>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <TIM_TI1_SetConfig+0x6c>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e003      	b.n	800406e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	b2db      	uxtb	r3, r3
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f003 030a 	and.w	r3, r3, #10
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40001800 	.word	0x40001800

080040cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0210 	bic.w	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004156:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	b29b      	uxth	r3, r3
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004254:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	031b      	lsls	r3, r3, #12
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	031b      	lsls	r3, r3, #12
 80042d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 0307 	orr.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	431a      	orrs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e05a      	b.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a21      	ldr	r2, [pc, #132]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d01d      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10c      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40001800 	.word	0x40001800

080044b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e03f      	b.n	800456a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fe70 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f929 	bl	8004774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08a      	sub	sp, #40	; 0x28
 8004576:	af02      	add	r7, sp, #8
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b20      	cmp	r3, #32
 8004590:	d17c      	bne.n	800468c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_UART_Transmit+0x2c>
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e075      	b.n	800468e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Transmit+0x3e>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e06e      	b.n	800468e <HAL_UART_Transmit+0x11c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2221      	movs	r2, #33	; 0x21
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c6:	f7fc ff53 	bl	8001470 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d108      	bne.n	80045f4 <HAL_UART_Transmit+0x82>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d104      	bne.n	80045f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e003      	b.n	80045fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004604:	e02a      	b.n	800465c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f840 	bl	8004696 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e036      	b.n	800468e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3302      	adds	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e007      	b.n	800464e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1cf      	bne.n	8004606 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f810 	bl	8004696 <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e006      	b.n	800468e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b090      	sub	sp, #64	; 0x40
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a6:	e050      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ae:	d04c      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b6:	f7fc fedb 	bl	8001470 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d241      	bcs.n	800474a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e6:	637a      	str	r2, [r7, #52]	; 0x34
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	63bb      	str	r3, [r7, #56]	; 0x38
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800471a:	623a      	str	r2, [r7, #32]
 800471c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	61bb      	str	r3, [r7, #24]
   return(result);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e00f      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	429a      	cmp	r2, r3
 8004766:	d09f      	beq.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3740      	adds	r7, #64	; 0x40
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b0c0      	sub	sp, #256	; 0x100
 800477a:	af00      	add	r7, sp, #0
 800477c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	68d9      	ldr	r1, [r3, #12]
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	ea40 0301 	orr.w	r3, r0, r1
 800479c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047cc:	f021 010c 	bic.w	r1, r1, #12
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047da:	430b      	orrs	r3, r1
 80047dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	6999      	ldr	r1, [r3, #24]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	ea40 0301 	orr.w	r3, r0, r1
 80047fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <UART_SetConfig+0x2cc>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d005      	beq.n	8004814 <UART_SetConfig+0xa0>
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d104      	bne.n	800481e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004814:	f7fd fe8a 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004818:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800481c:	e003      	b.n	8004826 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800481e:	f7fd fe71 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8004822:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004830:	f040 810c 	bne.w	8004a4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800483e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004842:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	1891      	adds	r1, r2, r2
 800484c:	65b9      	str	r1, [r7, #88]	; 0x58
 800484e:	415b      	adcs	r3, r3
 8004850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004852:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004856:	4621      	mov	r1, r4
 8004858:	eb12 0801 	adds.w	r8, r2, r1
 800485c:	4629      	mov	r1, r5
 800485e:	eb43 0901 	adc.w	r9, r3, r1
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	4690      	mov	r8, r2
 8004878:	4699      	mov	r9, r3
 800487a:	4623      	mov	r3, r4
 800487c:	eb18 0303 	adds.w	r3, r8, r3
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004884:	462b      	mov	r3, r5
 8004886:	eb49 0303 	adc.w	r3, r9, r3
 800488a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800489a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800489e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048a2:	460b      	mov	r3, r1
 80048a4:	18db      	adds	r3, r3, r3
 80048a6:	653b      	str	r3, [r7, #80]	; 0x50
 80048a8:	4613      	mov	r3, r2
 80048aa:	eb42 0303 	adc.w	r3, r2, r3
 80048ae:	657b      	str	r3, [r7, #84]	; 0x54
 80048b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048b8:	f7fb fca4 	bl	8000204 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <UART_SetConfig+0x2d4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048e4:	415b      	adcs	r3, r3
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ec:	4641      	mov	r1, r8
 80048ee:	eb12 0a01 	adds.w	sl, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb43 0b01 	adc.w	fp, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004904:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	4692      	mov	sl, r2
 800490e:	469b      	mov	fp, r3
 8004910:	4643      	mov	r3, r8
 8004912:	eb1a 0303 	adds.w	r3, sl, r3
 8004916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800491a:	464b      	mov	r3, r9
 800491c:	eb4b 0303 	adc.w	r3, fp, r3
 8004920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004930:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004934:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004938:	460b      	mov	r3, r1
 800493a:	18db      	adds	r3, r3, r3
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
 800493e:	4613      	mov	r3, r2
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
 8004946:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800494a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800494e:	f7fb fc59 	bl	8000204 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4611      	mov	r1, r2
 8004958:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <UART_SetConfig+0x2d4>)
 800495a:	fba3 2301 	umull	r2, r3, r3, r1
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2264      	movs	r2, #100	; 0x64
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004970:	fba3 2302 	umull	r2, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800497c:	441c      	add	r4, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004988:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800498c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	63b9      	str	r1, [r7, #56]	; 0x38
 8004998:	415b      	adcs	r3, r3
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a0:	4641      	mov	r1, r8
 80049a2:	1851      	adds	r1, r2, r1
 80049a4:	6339      	str	r1, [r7, #48]	; 0x30
 80049a6:	4649      	mov	r1, r9
 80049a8:	414b      	adcs	r3, r1
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049b8:	4659      	mov	r1, fp
 80049ba:	00cb      	lsls	r3, r1, #3
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c2:	4651      	mov	r1, sl
 80049c4:	00ca      	lsls	r2, r1, #3
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	4642      	mov	r2, r8
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d4:	464b      	mov	r3, r9
 80049d6:	460a      	mov	r2, r1
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049f4:	460b      	mov	r3, r1
 80049f6:	18db      	adds	r3, r3, r3
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	4613      	mov	r3, r2
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a0a:	f7fb fbfb 	bl	8000204 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	; 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3332      	adds	r3, #50	; 0x32
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 0207 	and.w	r2, r3, #7
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4422      	add	r2, r4
 8004a3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a3c:	e105      	b.n	8004c4a <UART_SetConfig+0x4d6>
 8004a3e:	bf00      	nop
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a5e:	4642      	mov	r2, r8
 8004a60:	464b      	mov	r3, r9
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	6239      	str	r1, [r7, #32]
 8004a66:	415b      	adcs	r3, r3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6e:	4641      	mov	r1, r8
 8004a70:	1854      	adds	r4, r2, r1
 8004a72:	4649      	mov	r1, r9
 8004a74:	eb43 0501 	adc.w	r5, r3, r1
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	00eb      	lsls	r3, r5, #3
 8004a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a86:	00e2      	lsls	r2, r4, #3
 8004a88:	4614      	mov	r4, r2
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	18e3      	adds	r3, r4, r3
 8004a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a94:	464b      	mov	r3, r9
 8004a96:	eb45 0303 	adc.w	r3, r5, r3
 8004a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aba:	4629      	mov	r1, r5
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	4621      	mov	r1, r4
 8004ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	008a      	lsls	r2, r1, #2
 8004ac8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004acc:	f7fb fb9a 	bl	8000204 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011c      	lsls	r4, r3, #4
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	61b9      	str	r1, [r7, #24]
 8004af8:	415b      	adcs	r3, r3
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6139      	str	r1, [r7, #16]
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b58:	4649      	mov	r1, r9
 8004b5a:	008b      	lsls	r3, r1, #2
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b62:	4641      	mov	r1, r8
 8004b64:	008a      	lsls	r2, r1, #2
 8004b66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b6a:	f7fb fb4b 	bl	8000204 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a34      	ldr	r2, [pc, #208]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b92:	441c      	add	r4, r3
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1851      	adds	r1, r2, r1
 8004bb6:	6039      	str	r1, [r7, #0]
 8004bb8:	4649      	mov	r1, r9
 8004bba:	414b      	adcs	r3, r1
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bca:	4659      	mov	r1, fp
 8004bcc:	00cb      	lsls	r3, r1, #3
 8004bce:	4651      	mov	r1, sl
 8004bd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	00ca      	lsls	r2, r1, #3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4642      	mov	r2, r8
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf8:	667a      	str	r2, [r7, #100]	; 0x64
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c06:	4649      	mov	r1, r9
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c10:	4641      	mov	r1, r8
 8004c12:	008a      	lsls	r2, r1, #2
 8004c14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c18:	f7fb faf4 	bl	8000204 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004c22:	fba3 1302 	umull	r1, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2164      	movs	r1, #100	; 0x64
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	3332      	adds	r3, #50	; 0x32
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4422      	add	r2, r4
 8004c48:	609a      	str	r2, [r3, #8]
}
 8004c4a:	bf00      	nop
 8004c4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4d0d      	ldr	r5, [pc, #52]	; (8004c94 <__libc_init_array+0x38>)
 8004c60:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c62:	1b64      	subs	r4, r4, r5
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	2600      	movs	r6, #0
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	4d0b      	ldr	r5, [pc, #44]	; (8004c9c <__libc_init_array+0x40>)
 8004c6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ca0 <__libc_init_array+0x44>)
 8004c70:	f000 f820 	bl	8004cb4 <_init>
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	2600      	movs	r6, #0
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	08004cf4 	.word	0x08004cf4
 8004c98:	08004cf4 	.word	0x08004cf4
 8004c9c:	08004cf4 	.word	0x08004cf4
 8004ca0:	08004cf8 	.word	0x08004cf8

08004ca4 <memset>:
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	bf00      	nop
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
